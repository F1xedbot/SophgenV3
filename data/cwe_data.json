{
  "CWE-20": {
    "summary": "What is Improper Input Validation? - Mayhem Security\nhttps://www.mayhem.security/blog/what-is-improper-input-validation\nCWE-20 Improper Input Validation in a web application can allow an attacker to supply malicious user input that is then executed by the vulnerable web application. If you are building a web application, input validation is an essential part of securing your application. By properly validating user input, you can ensure that your application is not susceptible to attack. User input comes from a variety of sources, including form data, cookies, query strings, and headers. Forms allow users to input data into your application, and if that data is not properly validated, it can be used to attack your application. Input validation is a critical part of securing a web application. By properly validating user input, you can ensure that your application is not susceptible to attack.\n\nCWE-20 - Improper Input Validation - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/20/\n# Improper Input Validation The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. Input validation is not the only technique for processing input, however. Input validation can be applied to: #### Strategy: Input Validation Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181).\n\nCWE-20 - Improper Input Validation - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-20\n| **CWE-284** | Improper Access Control | 47,077 | | **CWE-287** | Improper Authentication | 22,439 | | **CWE-89** | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 12,436 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,790 | | **CWE-285** | Improper Authorization | 7,163 | | **CWE-20** | Improper Input Validation | 6,222 | | **CWE-77** | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 4,769 | | **CWE-78** | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 4,272 | CWE-20 moderate: Apache HTTP Server: mod_rewrite proxy handler substitution (CVE-2024-39573) CWE-20 Improper Input Validation\n\nCWE 20 Improper Input Validation - CVE Details\nhttps://www.cvedetails.com/cwe-details/20/Improper-Input-Validation.html\nThis type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content.\n\nHow to fix CWE-20: Improper Input Validation - java - Stack Overflow\nhttps://stackoverflow.com/questions/71497953/how-to-fix-cwe-20-improper-input-validation\n1. Stack Overflow for Teams Where developers & technologists share private knowledge with coworkers The future of collective knowledge sharing # How to fix CWE-20: Improper Input Validation Ask Question Improve this question ## 2 Answers 2 This answer is useful CWE-20 is intended to protect against where the product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. This answer is useful You do something like this to validate the input Start asking to get answers Find the answer to your question by asking. Ask question Java ClassFormatError: Method \"<error>\" class has illegal signature Java Exam Error Checking Java:19: error New to Java\n",
    "query": "CWE-20 Improper Input Validation"
  },
  "CWE-326": {
    "summary": "Exploring CWE-326 Inadequate Encryption Strength - Ubiq Security\nhttps://www.ubiqsecurity.com/exploring-cwe-326-inadequate-encryption-strength%EF%BF%BC/\nWhen implementing cryptographic functionality in their code, developers may struggle to determine what cryptographic algorithms and settings are “good enough.” CWE-326 describes the use of inadequate encryption strength for protecting sensitive data. The goal of a cryptographic algorithm is to render the encrypted data unreadable without knowledge of certain secret values. This is accomplished via the use of various mathematical operations on the plaintext data, the encrypted key, and potentially other input parameters. * **Weak/Broken Ciphers:** Cryptographic algorithms are deprecated when a feasible attack is discovered that can break their encryption. * **Incorrect Parameters**: Encryption algorithms commonly use values that must be random or single use for their security. Avoiding the Inadequate Encryption Strength vulnerability boils down to using cryptographic algorithms properly.\n\nCWE 326 Inadequate Encryption Strength - CVE Details\nhttps://www.cvedetails.com/cwe-details/326/Inadequate-Encryption-Strength.html\n# CWE-326 : Inadequate Encryption Strength The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. Source: https://cwe.mitre.org/data/definitions/326.html Vulnerabilities related to CWE-326 ### Related CAPEC definitions CAPEC-112 Brute Force In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. CAPEC-192 Protocol Analysis CAPEC-20 Encryption Brute Forcing An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext. This web site uses cookies for managing your session, storing preferences, website analytics and additional purposes\n\nCWE-326 - Inadequate Encryption Strength - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/326\nCWE-326 - The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of\n\nCWE Discovery - Inadequate Encryption Strength - HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-326\nCWE-326 ... The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of\n\nCVE-2025-55248: CWE-326: Inadequate Encryption Strength in ...\nhttps://radar.offseq.com/threat/cve-2025-55248-cwe-326-inadequate-encryption-stren-f0ae79b0\nInadequate encryption strength in .NET, .NET Framework, Visual Studio allows an authorized attacker to disclose information over a network.\n",
    "query": "CWE-326"
  },
  "CWE-131": {
    "summary": "CVE-2024-11425 : CWE-131: Incorrect Calculation of ... - CVE Details\nhttps://www.cvedetails.com/cve/CVE-2024-11425/\nCWE-131: Incorrect Calculation of Buffer Size vulnerability exists that could cause Denial-of-Service of the product when an unauthenticated user is sending\n\nCWE-131 - Incorrect Calculation of Buffer Size - Details and CVSS ...\nhttps://appsec.backslash.security/cwe/131\nCWE-131 - The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\nCWE-131 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-131\nThe Common Weakness Enumeration Discovery Index shows platform-wide data of instances, and severity and remediation time distributions.\n\nIncorrect Calculation of Buffer Size - CWE-131 - CVE Details\nhttps://www.cvedetails.com/cwe-details/131/Incorrect-Calculation-of-Buffer-Size.html\nIn this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the\n\nCWE-131: Incorrect Calculation of Buffer Size - Vulnerability Overview\nhttps://www.clouddefense.ai/cwe/definitions/131\n| MemberOf | 742 | CWE-742: Weaknesses Addressed by the CERT C Secure Coding Standard (2008) | | MemberOf | 876 | CWE-876: Memory Management Vulnerabilities in CERT C++ Secure Coding Standard | | MemberOf | 1162 | CWE-1162: Memory Management Weaknesses in SEI CERT C Coding Standard | This practice helps prevent instances of CWE-130, which involves vulnerabilities related to inconsistencies in data size processing. To avoid the occurrence of CWE-467, it is recommended to utilize the sizeof() function with the suitable data type during the implementation phase. To ensure the security of the environment, it is recommended to implement measures during the operation phase, specifically in the build and compilation process.\n",
    "query": "CWE-131 details"
  },
  "CWE-367": {
    "summary": "CVE-2024-5558 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-5558\np_Doc_Ref=SEVD-2024-163-04&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2024-163-04.pdf ``` |  **Initial Analysis by NIST 7/25/2024 4:00:25 PM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | CVSS V3.1 |  | ``` NIST AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H ``` | | Added | CPE Configuration |  | ``` AND OR *cpe:2.3:o:schneider-electric:spacelogic_as-b_firmware:*:*:*:*:*:*:*:* versions up to (excluding) 6.0.1 OR cpe:2.3:h:schneider-electric:spacelogic_as-b:-:*:*:*:*:*:*:* ``` | | Added | CPE Configuration |  | ``` AND OR *cpe:2.3:o:schneider-electric:spacelogic_as-p_firmware:*:*:*:*:*:*:*:* versions up to (excluding) 6.0.1 OR cpe:2.3:h:schneider-electric:spacelogic_as-p:-:*:*:*:*:*:*:* ``` | | Changed | Reference Type | ``` https://download.schneider-electric.com/files? p_Doc_Ref=SEVD-2024-163-04&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2024-163-04.pdf Patch, Vendor Advisory ``` |  **New CVE Received from Schneider Electric SE 6/12/2024 1:15:52 PM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | Description |  | ``` CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability exists that could cause escalation of privileges when an attacker abuses a limited admin account.\n\nCWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\nhttps://cwe.mitre.org/data/definitions/367.html\n| CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition  |  | | --- | | Weakness ID: 367   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE-367 - Time-of-check Time-of-use (TOCTOU) Race Condition\nhttps://appsec.backslash.security/cwe/367\nCWE-367 - The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way\n\nCWE 367 Time-of-check Time-of-use (TOCTOU) Race Condition\nhttps://www.cvedetails.com/cwe-details/367/Time-of-check-Time-of-use-TOCTOU-Race-Condition.html\n# CWE-367 : Time-of-check Time-of-use (TOCTOU) Race Condition This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file. CAPEC-29 Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file.\n\nTime-of-check Time-of-use (TOCTOU) Race Condition CWE-367\nhttps://feedly.com/cve/cwe/367\n| CVE-2025-55680 Time-of-check time-of-use (toctou) race condition in Windows Cloud Files Mini Filter Driver allows an authorized attacker to elevate privileges locally. | CVE-2025-54271Creative Cloud Desktop versions 6.7.0.278 and earlier are affected by a Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability that could lead to arbitrary file system write. | CVE-2025-53788 Time-of-check time-of-use (toctou) race condition in Windows Subsystem for Linux allows an authorized attacker to elevate privileges locally. | CVE-2025-2425Time-of-check to time-of-use race condition vulnerability potentially allowed an attacker to use the installed ESET security software to clear the content of an arbitrary file on the file system. | CVE-2025-20074Time-of-check Time-of-use race condition for some Intel(R) Connectivity Performance Suite software installers before version 40.24.11210 may allow an authenticated user to potentially enable escalation of privilege via local access.\n",
    "query": "CWE-367 details"
  },
  "CWE-191": {
    "summary": "CWE-191: Integer Underflow (Wrap or Wraparound) (4.18)\nhttps://cwe.mitre.org/data/definitions/191.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-191: Integer Underflow (Wrap or Wraparound)  |  | | --- | | Weakness ID: 191   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 682 | Incorrect Calculation |  Relevant to the view \"Software Development\" (View-699) | Nature | Type | ID | Name | | --- | --- | --- | --- | | MemberOf | Category - a CWE entry that contains a set of other entries that share a common characteristic.\n\n7-Zip: CVE-2023-31102: CWE-191\nhttps://www.rapid7.com/db/vulnerabilities/7-zip-7-zip-cve-2023-31102/\nDescription. Ppmd7.c in 7-Zip before 23.00 allows an integer underflow and invalid read operation via a crafted 7Z archive. Solution. 7-zip-7\n\nCWE-191 - Integer Underflow (Wrap or Wraparound)\nhttps://appsec.backslash.security/cwe/191\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal\n\nCWE-191\nhttps://www.security-database.com/cwe.php?name=CWE-191\n# Your connection is not private Attackers might be trying to steal your information from **www.security-database.com** (for example, passwords, messages, or credit cards). Learn more about this warning net::ERR\\_CERT\\_DATE\\_INVALID Subject: www.security-database.com Issuer: R11 Expires on: Aug 24, 2025 Current date: Oct 13, 2025 PEM encoded chain: -----BEGIN CERTIFICATE-----   MIIFEDCCA/igAwIBAgISBoBz37kaMu8CZ5hNEuN/VGQQMA0GCSqGSIb3DQEBCwUA   MDMxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQwwCgYDVQQD   EwNSMTEwHhcNMjUwNTI2MTg1NTA0WhcNMjUwODI0MTg1NTAzWjAkMSIwIAYDVQQD   OabUS/1NhFDLUBkXvbP+zLW1WGAK6NzZvbKxX2lQCU5J/dY3nE92iWigeunGv+R4   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   WghiDLZsMwhN1zjtSC0uBWiugF3vTNzYIEFfaPG7Ws3jDrAMMYebQ95JQ+HIBD/R   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   -----END CERTIFICATE----- This server could not prove that it is **www.security-database.com**; its security certificate expired 50 days ago. This may be caused by a misconfiguration or an attacker intercepting your connection. Your computer's clock is currently set to Monday, October 13, 2025. If not, you should correct your system's clock and then refresh this page. Proceed to www.security-database.com (unsafe)\n\nCWE Rule 191 - Integer Underflow (Wrap or Wraparound)\nhttps://it.mathworks.com/help/bugfinder/ref/cwe191.html\nKeep integer variable values restricted to within half the range of signed integers. In operations that might overflow, check for conditions that can lead to\n",
    "query": "CWE-191"
  },
  "CWE-126": {
    "summary": "Buffer over-read in FGFM - PSIRT | FortiGuard Labs\nhttps://www.fortiguard.com/psirt/FG-IR-24-381\nA buffer over-read vulnerability [CWE-126] in FortiOS may allow a remote unauthenticated attacker to crash the FGFM daemon via a specially crafted request.\n\nCVE-2025-55084: CWE-126: Buffer Over-read in Eclipse ...\nhttps://radar.offseq.com/threat/cve-2025-55084-cwe-126-buffer-over-read-in-eclipse-3c83968d\nCVE-2025-55084 is a buffer over-read vulnerability classified under CWE-126, discovered in the Eclipse Foundation's NetX Duo TCP/IP stack,\n\nCWE-126: Buffer Over-read (4.18) - MITRE Corporation\nhttps://cwe.mitre.org/data/definitions/126.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-126: Buffer Over-read  |  | | --- | | Weakness ID: 126   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Variant Variant - a weakness that is linked to a certain type of product, typically involving a specific language or technology.\n\nCWE-126: Buffer Over-read - The Vulnerability History Project\nhttps://vulnerabilityhistory.org/tags/cwe-126\n# CWE-126: Buffer Over-read \"The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.\" - Entry from the Common Weakness Enumeration | CVE-2007-3847 | In HTTPD, which is an open source web server for unix-like systems, remote servers can cause denial of service when using threaded MPM by sending a malicious date header that triggers buffer over-read. | CVE-2017-7679 | This CVE describes a vulnerability related to the mod\\_mime module, which itself is responsible for associating meta-data to a file requested from the server. This caused by video files intentionally having bad data. | Bug allowed attackers to read data using array indicies out of bounds | 2019-04-18 | 0 |\n\nBuffer Over-Read (CWE-126) in DNS Response Parser - GitHub\nhttps://github.com/FreeRTOS/FreeRTOS-Plus-TCP/security/advisories/GHSA-ppcp-rg65-58mv\nBuffer Over-read. The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations\n",
    "query": "CWE-126"
  },
  "CWE-824": {
    "summary": "CWE-824: Access of Uninitialized Pointer\nhttps://cwe.mitre.org/data/definitions/824.html\n| |  |  | | --- | --- | | CWE Glossary Definition |  | |  | |    CWE-824: Access of Uninitialized Pointer  |  | | --- | | Weakness ID: 824   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. It is not a complete list of all CVEs that are related to this CWE entry.*  | Reference | Description | | --- | --- | | CVE-2024-32878 | LLM product has a free of an uninitialized pointer | | CVE-2019-3836 | Chain: secure communications library does not initialize a local variable for a data structure (CWE-456), leading to access of an uninitialized pointer (CWE-824).\n\nCWE 824 Access of Uninitialized Pointer - CVE Details\nhttps://www.cvedetails.com/cwe-details/824/Access-of-Uninitialized-Pointer.html\nCWE-824 : Access of Uninitialized Pointer. The product accesses or uses a pointer that has not been initialized. Created: 2010-09-22 Updated:\n\nCWE-824: Access of Uninitialized Pointer | Vulnerability History Project\nhttps://vulnerabilityhistory.org/tags/cwe-824\nCWE-824: Access of Uninitialized Pointer. \"The product accesses or uses a pointer that has not been initialized.\" - Entry from the Common Weakness\n\nAccess of Uninitialized Pointer - Martello Security\nhttps://martellosecurity.com/kb/mitre/cwe/824/\nThe product accesses or uses a pointer that has not been initialized. Source. CWE Catalog - 4.17. Identifier. CWE-824.\n\nCVE-2025-59962: CWE-824 Access of Uninitialized Pointer in ...\nhttps://radar.offseq.com/threat/cve-2025-59962-cwe-824-access-of-uninitialized-poi-fbffa826\nCVE-2025-59962 is a medium-severity vulnerability classified under CWE-824 (Access of Uninitialized Pointer) found in the routing protocol\n",
    "query": "CWE-824"
  },
  "CWE-444": {
    "summary": "CWE-444: Inconsistent Interpretation of HTTP Requests ... - Mitre\nhttps://cwe.mitre.org/data/definitions/444.html\n(attack code)  POST http://www.website.com/foobar.html HTTP/1.1Host: www.website.comConnection: Keep-AliveContent-Type: application/x-www-form-urlencodedContent-Length: 0Content-Length: 54GET /poison.html HTTP/1.1Host: www.website.comBla: GET http://www.website.com/page\\_to\\_poison.html HTTP/1.1Host: www.website.comConnection: Keep-Alive  When this request is sent to the proxy server, the proxy server parses the first four lines of the POST request and encounters the two \"Content-Length\" headers. (attack code)  POST http://www.website.com/foobar.html HTTP/1.1Host: www.website.comConnection: Keep-AliveContent-Type: application/x-www-form-urlencodedContent-Length: 0*Content-Length: 54 (ignored by server)*  Because the web server has assumed the original POST request was length 0, it parses the second request that follows, i.e. for GET /poison.html:  (attack code)  GET /poison.html HTTP/1.1Host: www.website.comBla: GET http://www.website.com/page\\_to\\_poison.html HTTP/1.1Host: www.website.comConnection: Keep-Alive  Note that the \"Bla:\" header is treated as a regular header, so it is not parsed as a separate GET request.\n\nCWE 444 Inconsistent Interpretation of HTTP Requests ('HTTP ...\nhttps://www.cvedetails.com/cwe-details/444/Inconsistent-Interpretation-of-HTTP-Requests-HTTP-Request-.html\nAn adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server). An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).\n\nCWE-444 - HTTP Request/Response Smuggling\nhttps://appsec.backslash.security/cwe/444\nCWE-444 - The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server,\n\nCWE-444 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=CWE-444\n## CWE Discovery | **CWE ID** | **Name** | **Number of reports** | | **CWE-79** | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 115,417 | | **CWE-284** | Improper Access Control | 49,057 | | **CWE-287** | Improper Authentication | 22,727 | | **CWE-89** | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 12,842 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,940 | | **CWE-285** | Improper Authorization | 7,452 | | **CWE-20** | Improper Input Validation | 6,505 | | **CWE-77** | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 4,815 | ## CWE-444\n\nWhat is HTTP Request Smuggling? - Fastly\nhttps://www.fastly.com/learning/security/what-is-http-request-smuggling\nThese vulnerabilities occur when a front-end device (e.g., CDN, load balancer, WAF), and a back-end device (e.g., web-server) interpret the end of the HTTP request differently, due to the presence of different HTTP headers (i.e., `Transfer-Encoding, Content-Length`). When front-end and back-end devices do not use the same of these two headers to determine the end of the request, they may parse the end of the request differently, leading to an HTTP request smuggling vulnerability. A CL.TE vulnerability refers to an HTTP request smuggling attack where the front-end uses the `Content-Length` header, but the back-end uses the `Transfer-Encoding` header. A TE.CL vulnerability refers to an HTTP request smuggling attack where the front-end uses the  `Transfer-Encoding` header but the back-end uses the `Content-Length` header.\n",
    "query": "CWE-444 details"
  },
  "CWE-276": {
    "summary": "Incorrect Default Permissions [CWE-276] — The Hacktivists - Medium\nhttps://medium.com/@thehacktivists/incorrect-default-permissions-cwe-276-the-hacktivists-bf79d1ba6ad2\nThis weakness describes a case where software sets unintended permissions to directories, files or other objects during the installation process. Access to these objects (**e.g.** files, directories, registry keys, etc.) is crucial for security mechanisms implemented in different operating systems and can influence system behaviour depending on permissions imposed upon key components of the operating system. **❏ General permissions:** Access permissions in Linux and UNIX-like systems are based on three user classes (user, group, and others) and three access modes (read, write, and execute). Software that changes access rights to objects during installation is potentially vulnerable to this weakness. As a result of this vulnerability, any local user has full access to files within the “/frameworkgui/” directory.\n\nIncorrect Default Permissions - CWE-276 - CVE Details\nhttps://www.cvedetails.com/cwe-details/276/Incorrect-Default-Permissions.html\nIn applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.\n\n[CVE-2018-14335] CWE-276: Incorrect Default Permissions\nhttps://ossindex.sonatype.org/vulnerability/CVE-2018-14335\nAn issue was discovered in H2 1.4.197. Insecure handling of permissions in the backup function allows attackers to read sensitive files (outside of their\n\nCWE-276 Insecure File Permissions - CloudDefense.AI\nhttps://www.clouddefense.ai/cwe/definitions/276\n| MemberOf | 743 | CWE-743: Weaknesses in Input Output (FIO) of CERT C Standard | | MemberOf | 857 | CWE-857: Input Output Vulnerabilities | | MemberOf | 877 | CWE-877: Weaknesses in Input Output Section of CERT C++ Standard | | MemberOf | 946 | CWE-946: Insecure Resource Permissions | | MemberOf | 1337 | CWE-1337: The 2021 CWE Top 25 Most Dangerous Software Weaknesses | | MemberOf | 1345 | CWE-1345: Broken Access Control: Weaknesses in OWASP Top Ten (2021) | | MemberOf | 1387 | CWE-1387: Hierarchical Connections Between Software Weaknesses | | MemberOf | 1396 | CWE-1396: Improper Access Control | | MemberOf | 1425 | CWE-1425: CWE Top 25 Most Dangerous Software Weaknesses |\n\nCWE-276: Incorrect Default Permissions (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/276.html\n| 732 | Incorrect Permission Assignment for Critical Resource |  Relevant to the view \"Software Development\" (View-699) | Nature | Type | ID | Name | | --- | --- | --- | --- | | MemberOf | Category - a CWE entry that contains a set of other entries that share a common characteristic.\n",
    "query": "CWE-276"
  },
  "CWE-667": {
    "summary": "CWE 667 Improper Locking - CVE Details\nhttps://www.cvedetails.com/cwe-details/667/Improper-Locking.html\nCWE-667 : Improper Locking. The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\nCWE Rule 667 - Improper Locking - MATLAB - MathWorks\nhttps://www.mathworks.com/help/bugfinder/ref/cwe667.html\nRule Description. The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\nCWE-667 - Improper Locking - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/667\nCWE-667 - The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\nCWE-667 - Improper Locking - CyberSecurity Help\nhttps://www.cybersecurity-help.cz/vdb/cwe/667/\nDescription. The software does not properly acquire a lock on a resource, or it does not properly release a lock on a resource, leading to unexpected\n\nCWE-667 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-667\nThe product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors. Extended Description: Related\n",
    "query": "CWE-667 description"
  },
  "CWE-823": {
    "summary": "CWE Version 4.12\nhttps://cwe.mitre.org/data/published/cwe_v4.12.pdf\nCWE-823: Use of Out-of-range Pointer ... CWE-924: Improper Enforcement of Message Integrity During Transmission in a Communication Channel.\n\nReport a security issue | Clockify Security\nhttps://security.cake.com/submit/\ncwe 823 - Use of Out-of-range Pointer Offset, cwe 824 ... cwe 924 - Improper Enforcement of Message Integrity During Transmission in a Communication Channel\n\nDifferences between Version 4.10 and Version 4.11 - CWE\nhttps://cwe.mitre.org/data/reports/diff_reports/v4.10_v4.11.html\n823, Use of Out-of-range Pointer Offset. R, 824 ... Improper Enforcement of Message Integrity During Transmission in a Communication Channel.\n\nDifferences between Version 4.8 and Version 4.9 - CWE\nhttps://cwe.mitre.org/data/reports/diff_reports/v4.8_v4.9.html\n823, Use of Out-of-range Pointer Offset. Major ... Improper Enforcement of Message Integrity During Transmission in a Communication Channel.\n\nCWE Definitions list and vulnerabilities for CWE entries\nhttps://www.cvedetails.com/cwe-definitions/14/cwelist.html?order=1&trc=668&sha=0427874cc45423ccb6974ee25935fbfceac76fcb\n| [CWE-806](https://www.cvedetails.com/cwe-details/806/Buffer-Access-Using-Size-of-Source-Buffer.html \"CWE-806 - CWE definition\") | Buffer Access Using Size of Source Buffer | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-806/vulnerabilities.html \"View list of security vulnerabilities related to CWE-806\") | | [CWE-830](https://www.cvedetails.com/cwe-details/830/Inclusion-of-Web-Functionality-from-an-Untrusted-Source.html \"CWE-830 - CWE definition\") | Inclusion of Web Functionality from an Untrusted Source | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-830/vulnerabilities.html \"View list of security vulnerabilities related to CWE-830\") | | [CWE-908](https://www.cvedetails.com/cwe-details/908/Use-of-Uninitialized-Resource.html \"CWE-908 - CWE definition\") | Use of Uninitialized Resource | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-908/vulnerabilities.html \"View list of security vulnerabilities related to CWE-908\") | | [CWE-924](https://www.cvedetails.com/cwe-details/924/Improper-Enforcement-of-Message-Integrity-During-Transmissio.html \"CWE-924 - CWE definition\") | Improper Enforcement of Message Integrity During Transmission in a Communication Channel | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-924/vulnerabilities.html \"View list of security vulnerabilities related to CWE-924\") | | [CWE-940](https://www.cvedetails.com/cwe-details/940/Improper-Verification-of-Source-of-a-Communication-Channel.html \"CWE-940 - CWE definition\") | Improper Verification of Source of a Communication Channel | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-940/vulnerabilities.html \"View list of security vulnerabilities related to CWE-940\") |\n",
    "query": "CWE-823 \"Improper Enforcement of Message Integrity During Transmission\""
  },
  "CWE-241": {
    "summary": "Improper Neutralization of CRLF Sequences in HTTP Headers #67\nhttps://github.com/i2p/i2p.i2p/issues/67\nCRLF sequences in HTTP headers are known as \"response splitting\" because these characters effectively split the response from the browser.\n\nImproper neutralization of CRLF sequences in HTTP headers ...\nhttps://docs.prismacloud.io/en/enterprise-edition/policy-reference/sast-policies/java-policies/sast-policy-9\nThis SAST policy detects improper neutralization of CRLF sequences in HTTP headers, also known as \"HTTP Response Splitting.\"\n\nVeraCode static code scan reports \"Improper Neutralization of CRLF ...\nhttps://security.stackexchange.com/questions/223754/veracode-static-code-scan-reports-improper-neutralization-of-crlf-sequences-in\nThis is might happen because of Improper Neutralization of CRLF Sequences in HTTP Headers (AKA \"HTTP Response Splitting\"). These days, this\n\nImproper Neutralization of CRLF Sequences in HTTP Headers ...\nhttps://veracode.my.site.com/CustomerCommunity/s/question/0D53400004abHpSCAU/improper-neutralization-of-crlf-sequences-in-http-headers-http-response-splittingcwe-id-113\nGreat question, the use of header checking is one approach that should sufficiently protect your headers from CRLF Injection.\n\nImproper Neutralization of CRLF Sequences in HTTP Headers ...\nhttps://security.snyk.io/vuln/SNYK-CONAN-CROWCPPCROW-10075491\nOverview. Affected versions of this package are vulnerable to Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response\n",
    "query": "CWE-241: Improper Neutralization of Special Elements in Output (Improper Neutralization of CRLF Sequence in HTTP Headers)"
  },
  "CWE-16": {
    "summary": "CWE-16: Software Configuration Vulnerabilities - CloudDefense.AI\nhttps://www.clouddefense.ai/cwe/definitions/16\n# CWE-16: Common Vulnerabilities in Software Configuration The vulnerabilities in CWE-16 are commonly present during software configuration. The vulnerabilities in this particular category are commonly present when the software is being configured. | MemberOf | 933 | CWE-933: Weaknesses Linked to OWASP Top Ten (2013) | | MemberOf | 1032 | CWE-1032: Weaknesses in OWASP Top Ten 2017 Category A6 | | MemberOf | 1349 | CWE-1349: Vulnerabilities Associated with Security Misconfiguration | The utilization of this CWE ID to represent actual vulnerabilities is strictly forbidden and should not occur. In order to perform CWE mapping, it is necessary to analyze the vulnerabilities caused by the configured behavior, such as issues related to access control (CWE-284 and its descendants) or resource management (CWE-400), among others.\n\nCWE-16 Web Vulnerability & Security Checks - Invicti\nhttps://www.invicti.com/web-vulnerability-scanner/vulnerabilities/classification/cwe-16/page/7/\nWeb Application Vulnerabilities Index. This page lists 89 vulnerabilities classified as CWE-16 that can be detected by Invicti.\n\nCWE-16: CWE CATEGORY: Configuration (4.18) - MITRE Corporation\nhttps://cwe.mitre.org/data/definitions/16.html\nCWE List   ► | |  |  | | --- | --- | | CWE Glossary Definition |  | |  | |    CWE CATEGORY: Configuration  |  | | --- | | Category ID: 16   Vulnerability Mapping: PROHIBITED This CWE ID must not be used to map to real-world vulnerabilities |  Summary  Weaknesses in this category are typically introduced during the configuration of the software. | 635 | Weaknesses Originally Used by NVD from 2008 to 2016 | | MemberOf | Category - a CWE entry that contains a set of other entries that share a common characteristic. Maintenance  This entry is a Category, but various sources map to it anyway, despite CWE guidance that Categories should not be mapped.\n\nShow CWE-16: Configuration - CXSecurity.com\nhttps://cxsecurity.com/cwe/CWE-16\nAn attacker could exploit this vulnerability by authenticating to the affected device with a crafted user ID, which may allow temporary administrative\n\nConfiguration Vulnerabilities - Acunetix\nhttps://www.acunetix.com/vulnerabilities/web/tag/configuration/\n... CWE-16 · CWE-16, Medium. WordPress configuration file weak file permissions · CWE-16 · CWE-16, Medium. WordPress default administrator account · CWE-16 · CWE-16\n",
    "query": "CWE-16 vulnerability"
  },
  "CWE-863": {
    "summary": "CWE-863: Insecure Direct Object References in Authentication Data\nhttps://www.clouddefense.ai/cwe/definitions/863\nExplore the details of CWE-863 which focuses on Insecure Direct Object References in Authentication Data. Keep up with security best practices.\n\nCWE 863 Incorrect Authorization - CVE Details\nhttps://www.cvedetails.com/cwe-details/863/Incorrect-Authorization.html\npowered by SecurityScorecard Vulnerabilities  My Attack SurfaceDigital FootprintDiscovered ProductsDetected VulnsIP Search Created: 2011-05-24 Updated: 2025-04-03 Source:https://cwe.mitre.org/data/definitions/863.html Vulnerabilities related to CWE-863 Image 2: SecurityScorecard SecurityScorecard  This product uses data from the NVD API but is not endorsed or certified by the NVD. CVE is a registred trademark of the MITRE Corporation and the authoritative source of CVE content is MITRE's CVE web site. CWE is a registred trademark of the MITRE Corporation and the authoritative source of CWE content is MITRE's CWE web site. OVAL is a registered trademark of The MITRE Corporation and the authoritative source of OVAL content is MITRE's OVAL web site. By using this web site you are agreeing to CVEdetails.com terms of use!\n\nCVE-2025-6892: CWE-863: Incorrect Authorization in Moxa EDR ...\nhttps://radar.offseq.com/threat/cve-2025-6892-cwe-863-incorrect-authorization-in-m-1b7367be\nAn Incorrect Authorization vulnerability has been identified in Moxa's network security appliances and routers.\n\nCWE-863 - Incorrect Authorization - CyberSecurity Help\nhttps://www.cybersecurity-help.cz/vdb/cwe/863/\n*   Vulnerability Intelligence *   Vulnerability Management *   Vulnerabilities 2.   Vulnerability Database The vulnerability may result in information exposures, denial of service, and arbitrary code execution. Latest vulnerabilities for CWE-863 Multiple vulnerabilities in Adobe ColdFusion 2025-07-09  **High****Yes** **Critical****Yes****Public exploit** **Low****Yes** Multiple vulnerabilities in Autel Energy MaxiCharger AC Elite Business 50A 2025-06-13  **High****Yes** Multiple vulnerabilities in Lenovo NVIDIA GPU Display driver 2025-06-13  Multiple vulnerabilities in IBM API Connect 2025-06-11  **Critical****Yes****Public exploit** Multiple vulnerabilities in IBM Observability with Instana (OnPrem)\") 2025-06-06  **High****Yes****Public exploit** Multiple vulnerabilities in IBM Concert Software 2025-06-05  **High****Yes****Public exploit** Multiple vulnerabilities in IBM Cloud Pak for Security and IBM QRadar Suite Software 2025-06-05  **Critical****Yes****Public exploit** Image 2 ##### Security Services *   Actionable & Personalized Vulnerability Intelligence *   On-Demand Security Consulting\n\nCWE-863 - Incorrect Authorization - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/863\n### CVSS severity (NVD, All Time) Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, consider using authorization frameworks such as the JAAS Authorization Framework and the OWASP ESAPI Access Control feature.\n",
    "query": "CWE-863 details"
  },
  "CWE-532": {
    "summary": "CWE 532 Insertion of Sensitive Information into Log File - CVE Details\nhttps://www.cvedetails.com/cwe-details/532/Insertion-of-Sensitive-Information-into-Log-File.html\n# CWE-532 : Insertion of Sensitive Information into Log File The product writes sensitive information to a log file. Source: https://cwe.mitre.org/data/definitions/532.html Vulnerabilities related to CWE-532 ### Related CAPEC definitions An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. Please note that CWE definitions are provided as a quick reference only. Visit http://cwe.mitre.org/ for a complete list of CWE entries This web site uses cookies for managing your session, storing preferences, website analytics and additional purposes\n\nCVE-2024-5557 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-5557\np_Doc_Ref=SEVD-2024-163-04&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2024-163-04.pdf ``` |  **Initial Analysis by NIST 7/25/2024 4:00:46 PM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | CVSS V3.1 |  | ``` NIST AV:A/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N ``` | | Added | CPE Configuration |  | ``` AND OR *cpe:2.3:o:schneider-electric:spacelogic_as-b_firmware:*:*:*:*:*:*:*:* versions up to (excluding) 6.0.1 OR cpe:2.3:h:schneider-electric:spacelogic_as-b:-:*:*:*:*:*:*:* ``` | | Added | CPE Configuration |  | ``` AND OR *cpe:2.3:o:schneider-electric:spacelogic_as-p_firmware:*:*:*:*:*:*:*:* versions up to (excluding) 6.0.1 OR cpe:2.3:h:schneider-electric:spacelogic_as-p:-:*:*:*:*:*:*:* ``` | | Changed | Reference Type | ``` https://download.schneider-electric.com/files? p_Doc_Ref=SEVD-2024-163-04&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2024-163-04.pdf Patch, Vendor Advisory ``` |  **New CVE Received from Schneider Electric SE 6/12/2024 1:15:51 PM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | Description |  | ``` CWE-532: Insertion of Sensitive Information into Log File vulnerability exists that could cause exposure of SNMP credentials when an attacker has access to the controller logs.\n\nCWE-532: Insertion of Sensitive Information into Log File\nhttps://cwe.mitre.org/data/definitions/532\nInsertion of Sensitive Information into Log File. Weakness ID: 532. Vulnerability Mapping: ALLOWED. This CWE ID may be used to map to real-world\n\nCWE-532 - WebTechSurvey\nhttps://webtechsurvey.com/cwe/CWE-532\nCWE-532. Insertion of Sensitive Information into Log File Information written to log files can be of a sensitive nature and give valuable guidance to an\n\nCVE-2025-10486: CWE-532 Insertion of Sensitive Information into ...\nhttps://radar.offseq.com/threat/cve-2025-10486-cwe-532-insertion-of-sensitive-info-330a0223\nThe vulnerability is categorized under CWE-532, which pertains to the insertion of sensitive information into log files, a common security\n",
    "query": "CWE-532 details"
  },
  "CWE-320": {
    "summary": "CWE-320 - Key Management Errors - CyberSecurity Help\nhttps://www.cybersecurity-help.cz/vdb/cwe/320/\nDescription. Weaknesses in this category are conected with errors in the management of cryptographic keys. Latest vulnerabilities for CWE-320.\n\nCWE-320: CWE CATEGORY: Key Management Errors (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/320.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE CATEGORY: Key Management Errors  |  | | --- | | Category ID: 320   Vulnerability Mapping: PROHIBITED This CWE ID must not be used to map to real-world vulnerabilities |  Summary  Weaknesses in this category are related to errors in the management of cryptographic keys. | 1029 | OWASP Top Ten 2017 Category A3 - Sensitive Data Exposure | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nV1.6.1 Cryptographic Architecture - ASVS for Dummies\nhttps://asvs-for-dummies.pages.dev/item/V1_6_1\n... follows a key management standard such as NIST SP 800-57. Quick Reference and CWE. No reference available. Common Weakness Enumeration (CWE): CWE:320. Notes.\n\nCWE-320: Mishandling Cryptographic Keys - CloudDefense.AI\nhttps://www.clouddefense.ai/cwe/definitions/320\nIssues within CWE 320 stem from mishandling cryptographic keys. Avoid key exchange without entity authentication, reusing a nonce, key pair in encryption.\n\nWeak Encryption Algorithms - CQR\nhttps://cqr.company/web-vulnerabilities/weak-encryption-algorithms/\n**•**CWE-327: Use of a Broken or Risky Cryptographic Algorithm: This CWE is related to the use of weak encryption algorithms that can be easily broken or are vulnerable to attack. **•**CVE-2014-3812 – The Juniper Junos Pulse Secure Access Service (SSL VPN) devices with IVE OS before 7.4r5 and 8.x before 8.0r1 and Junos Pulse Access Control Service (UAC) before 4.4r5 and 5.x before 5.0r1 enable cipher suites with weak encryption algorithms, which make it easier for remote attackers to obtain sensitive information by sniffing the network. **•**CVE-2013-0531 – The SSL implementation in IBM Security AppScan Enterprise before 8.7.0.1 enables cipher suites with weak encryption algorithms, which makes it easier for remote attackers to obtain sensitive information by sniffing the network.\n",
    "query": "CWE-320 Weak Encryption"
  },
  "CWE-89": {
    "summary": "SQL Injection [CWE-89] — The Hacktivists - Medium\nhttps://thehacktivists.medium.com/sql-injection-cwe-89-the-hacktivists-5d43c8eeb8eb\n# SQL Injection [CWE-89] — The Hacktivists The basic form of SQL injection describes the direct insertion of attacker-controlled data into variables that are used to construct SQL commands. An attacker exploits this weakness in software that constructs SQL commands based on user input. **❏** CAPEC-7: Blind SQL Injection   **❏** CAPEC-66: SQL Injection   **❏** CAPEC-108: Command Line Execution through SQL Injection   **❏** CAPEC-110: SQL Injection through SOAP Parameter Tampering   WASC Threat Classification describes SQL injection weakness as an attack technique under WASC-19. Software that uses a backend database to store or read information is potentially vulnerable to this weakness. The common CVSS score for SQL injection vulnerabilities in publicly accessible scripts is:   Sql Injection ## What is SQL Injections ?\n\nCWE 89: SQL Injection | Java - Veracode\nhttps://www.veracode.com/security/java/cwe-89/\nAPPLICATION SECURITY * Application Security Basics + App Security Testing + Application Security Assessment + Application Security Risk + Application Security Tools + Mobile App Security Testing + SaaS Application Security + Secure Applications + Software Code Security + Software Security + Web Application Security Testing + Web Application Testing + Web Application Security Standards * Advanced Application Security + Secure Web Application Development - CWE 89: SQL Injection - CWE 89: SQL Injection + Vendor Application Security Testing CWE 89: SQL Injection # CWE 89: SQL Injection **CWE 89: SQL Injection** flaws occur when you create a SQL statement by building a `String` that includes untrusted data, such as input from a web form, cookie, or URL query-string.\n\nCWE-89 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-89\nA SQL injection vulnerability was discovered in the agent-manager of Acronis, which allowed an attacker to execute arbitrary SQL commands and potentially gain\n\nCWE Rule 89 - SQL Injection - MathWorks\nhttps://www.mathworks.com/help/bugfinder/ref/cwe89.html\nA malicious user can inject code masquerading as input, resulting in: Bypassing of logic that secures part of the database. Execution of malicious SQL queries\n\nCWE-564: SQL Injection: Hibernate (4.18) - MITRE Corporation\nhttps://cwe.mitre.org/data/definitions/564.html\n| 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') |  Relevant to the view \"CISQ Quality Measures (2020)\" (View-1305) | Nature | Type | ID | Name | | --- | --- | --- | --- | | ChildOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 89 | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') |  Relevant to the view \"Weaknesses in OWASP Top Ten (2013)\" (View-928) | Nature | Type | ID | Name | | --- | --- | --- | --- | | ChildOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n",
    "query": "CWE-89 SQL injection"
  },
  "CWE-323": {
    "summary": "CWE-323: Reusing a Nonce, Key Pair in Encryption - Mitre\nhttps://cwe.mitre.org/data/definitions/323.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-323: Reusing a Nonce, Key Pair in Encryption  |  | | --- | | Weakness ID: 323   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE 323 Reusing a Nonce, Key Pair in Encryption - CVE Details\nhttps://www.cvedetails.com/cwe-details/323/Reusing-a-Nonce-Key-Pair-in-Encryption.html\nCWE-323 : Reusing a Nonce, Key Pair in Encryption. Nonces should be used for the present occasion and only once. Created: 2006-07-\n\nCVE-2024-23688 - CVE Record\nhttps://www.cve.org/CVERecord?id=CVE-2024-23688\nCWE 1 Total. Learn more · CWE-323: CWE-323 Reusing a Nonce, Key Pair in Encryption. Product Status. Learn more. Versions 1 Total. Default Status\n\nCWE-323 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-323\nThe Common Weakness Enumeration Discovery Index shows platform-wide data of instances, and severity and remediation time distributions. CWE data extracted every\n\nCWE-323 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-323\nSecurity-Database help your corporation foresee and avoid any security risks that may impact your IT infrastructure and business applications.\n",
    "query": "CWE-323"
  },
  "CWE-330": {
    "summary": "CWE - Security Reviewer\nhttps://securityreviewer.atlassian.net/wiki/spaces/KC/pages/29524029/CWE\n**CWE**™(Common Weakness Enumeration)aims to provide a common base to identify the type of software weakness (vulnerability)..International in scope and free for public use, CWE™ provides a unified, measurable set of software weaknesses that will enable more effective discussion, description, selection, and use of software security tools and services that can find these weaknesses in source code.CWE™ gives a hierarchically structured list of weakness types to help identifying software vulnerabilities that come in a wide variety, such as SQL injection, cross-site scripting and buffer overflow. Accuracy Security, Dead code, Best practices Rules, Analysis Results and Reports Security Reviewer supports many of CWE 4.4 IDs related to Static Analysis\n\nCWE-330 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-330\nWhen software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be\n\nMaster CWE: Top 25 Weaknesses & CWE 4.14 Guide - LDRA\nhttps://ldra.com/standards-compliance/security-cwe/\nThe Common Weakness Enumeration (CWE) list therefore covers a broad spectrum of hardware and software issues. It itemises over 800 programming errors, design\n\nCommon Weakness Enumeration (CWE) - MATLAB & Simulink\nhttps://www.mathworks.com/help//bugfinder/cwe-common-weakness-enumeration-rules.html?s_tid=CRUX_lftnav\n| `CWE Rule 128` | Wrap-around Error *(Since R2023a)* | | `CWE Rule 192` | Integer Coercion Error *(Since R2023a)* | | `CWE Rule 197` | Numeric Truncation Error *(Since R2023a)* | | `CWE Rule 391` | Unchecked Error Condition *(Since R2024a)* | | `CWE Rule 128` | Wrap-around Error *(Since R2023a)* | | `CWE Rule 197` | Numeric Truncation Error *(Since R2023a)* | | `CWE Rule 128` | Wrap-around Error *(Since R2023a)* | | `CWE Rule 197` | Numeric Truncation Error *(Since R2023a)* | | `CWE Rule 391` | Unchecked Error Condition *(Since R2024a)* | | `CWE Rule 128` | Wrap-around Error *(Since R2023a)* | | `CWE Rule 197` | Numeric Truncation Error *(Since R2023a)* | * (English) * (English) + English + English\n\nCommon Weakness Enumeration: CWE\nhttps://cwe.mitre.org/\n| |  | | --- | | CWE Glossary Definition | |  |  |  |  |  | | --- | --- | --- | | |  |  | | --- | --- | |  | Knowing the weaknesses that result in vulnerabilities means software developers, hardware designers, and security architects can eliminate them before deployment, when it is much easier and cheaper to do so | | | | Learn About CWE | | --- | | Overview – Learn what CWE is and how to use the information available on this website + Basics + FAQs + Glossary | Root Cause Mapping – Learn about identifying the underlying cause(s) of a vulnerability + Guidance + Quick Tips + Examples | | | | Access Content | | --- | | + All Weaknesses (944 total) + Top-N Lists **Search CWE**  **View CWEs by**    **CWE REST API** | | | Contribute | | --- | | + Contribute CWE Content + Participate in Working Groups | | | Latest News and Updates | | --- | | News CWE Version 4.18 Now Available!\n",
    "query": "CWE-330 Common Weakness Enumeration"
  },
  "CWE-125": {
    "summary": "CWE-125: Out-of-bounds Read (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/125.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-125: Out-of-bounds Read  |  | | --- | | Weakness ID: 125   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer |  Relevant to the view \"CISQ Data Protection Measures\" (View-1340) | Nature | Type | ID | Name | | --- | --- | --- | --- | | ChildOf | Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology.\n\nCVE-2025-55681: CWE-125: Out-of-bounds Read in Microsoft ...\nhttps://radar.offseq.com/threat/cve-2025-55681-cwe-125-out-of-bounds-read-in-micro-d0bbfee9\nThe vulnerability is tracked under CWE-125 (Out-of-bounds Read), which typically leads to information disclosure or memory corruption, and\n\nCWE-125 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-125\nThis will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. | CVE-2023-1018 | The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to read 2 bytes past the end of a buffer. | CVE-2014-0160 | Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data. | CVE-2009-2523 | Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122). | CVE-2004-1940 | large length value causes out-of-bounds read |\n\nCWE 125 Out-of-bounds Read - CVE Details\nhttps://www.cvedetails.com/cwe-details/125/Out-of-bounds-Read.html\nThe product reads data past the end, or before the beginning, of the intended buffer. Created: 2006-07-19 Updated: 2025-09\n\nCWE-125 - WebTechSurvey\nhttps://webtechsurvey.com/cwe/CWE-125\nThe product reads data past the end, or before the beginning, of the intended buffer. We have discovered 5,575,748 live websites that are affected by CWE-125.\n",
    "query": "CWE-125 details"
  },
  "CWE-672": {
    "summary": "CVE-2025-31253 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/cve-2025-31253\nCWE-ID, CWE Name, Source. CWE-672, Operation on a Resource after Expiration or Release, CISA-ADP. Known Affected Software Configurations Switch\n\nAdmin Account Persistence after Deletion - PSIRT | FortiGuard Labs\nhttps://fortiguard.fortinet.com/psirt/FG-IR-24-239\n# Admin Account Persistence after Deletion An operation on a resource after expiration or release vulnerability [CWE-672] in FortiManager may allow a Fortigate admin account that is deleted through FortiManager to still be able to login to the FortiGate via valid credentials. | FortiManager 7.6 | Not affected | Not Applicable | | FortiManager 7.4 | 7.4.0 | Upgrade to 7.4.1 or above | | FortiManager 7.2 | 7.2.3 | Upgrade to 7.2.4 or above | | FortiManager 7.0 | 7.0.7 through 7.0.8 | Upgrade to 7.0.9 or above | Delete the admin account directly from the FortiGate if intended to be done. This site uses cookies. By continuing to use the site, you consent to the use of these cookies.\n\nCVE-2025-55669: CWE-672 Operation on a Resource after ...\nhttps://radar.offseq.com/threat/cve-2025-55669-cwe-672-operation-on-a-resource-aft-de0ddcac\nCVE-2025-55669 is a vulnerability classified under CWE-672 (Operation on a Resource after Expiration or Release) affecting F5 BIG-IP versions\n\nCWE Rule 672 - Operation on a Resource after Expiration or Release\nhttps://www.mathworks.com/help/bugfinder/ref/cwe672.html\nThe product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.\n\nCWE-672 - Operation on a Resource after Expiration or Release\nhttps://www.cybersecurity-help.cz/vdb/cwe/672/\nThe software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked. Latest vulnerabilities for CWE-672.\n",
    "query": "CWE-672"
  },
  "CWE-311": {
    "summary": "CWE 311 Missing Encryption of Sensitive Data - CVE Details\nhttps://www.cvedetails.com/cwe-details/311/Missing-Encryption-of-Sensitive-Data.html\nCWE-311 means the product does not encrypt sensitive or critical information before storage or transmission.\n\nCVE-2022-30237 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-30237\nA CWE-311: Missing Encryption of Sensitive Data vulnerability exists that could allow authentication credentials to be recovered when an attacker breaks the\n\nTop 25 Series - Rank 10 - Missing Encryption of Sensitive Data\nhttps://www.sans.org/blog/top-25-series-rank-10-missing-encryption-of-sensitive-data\nEntry #10 on the CWE/SANS Top 25 is CWE-311: Missing Encryption of Sensitive Data. In a previous post we discussed how we obtained command line\n\nCWE-311 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-311\nDescription: The product does not encrypt sensitive or critical information before storage or transmission. Extended Description: Related Weaknesses: CWE-693 (\n\nMissing Encryption of Sensitive Data - CVEs - page 1 - Feedly\nhttps://feedly.com/cve/cwe/311\nMissing Encryption of Sensitive Data. CWE-311 ; CVE-2024-42495Credentials to access device configuration were transmitted using an unencrypted protocol. These\n",
    "query": "CWE-311 details"
  },
  "CWE-681": {
    "summary": "CVE-2025-53733: CWE-681: Incorrect Conversion between ...\nhttps://radar.offseq.com/threat/cve-2025-53733-cwe-681-incorrect-conversion-betwee-40b2394f\nThe vulnerability allows an unauthorized attacker to run code on the affected system, potentially leading to full system compromise. The CVSS 3.1 base score of\n\nCVE-2023-0185 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-0185\nCWE-681, Incorrect Conversion between Numeric Types, cwe source acceptance level NIST ; CWE-196, Unsigned to Signed Conversion Error, NVIDIA ...Read more\n\nCWE-681: Risks of Improper Numeric Type Conversion\nhttps://www.clouddefense.ai/cwe/definitions/681\nLearn about CWE-681, which highlights the risks associated with improper conversion between different types of numbers and the importance of validating values ...Read more\n\nCWE-681\nhttps://www.security-database.com/cwe.php?name=CWE-681\nWhen converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values.Read more\n\nCWE-681 Details | ByteOS Network\nhttps://www.byteos.network/cwes/CWE-681\nWhen converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values.\n",
    "query": "CWE-681 vulnerability details"
  },
  "CWE-119": {
    "summary": "CWE-119\nhttps://pentest.y-security.de/CWE/CWE-119/\nDescription. The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary.\n\nCWE-119 weakness\nhttps://pentestreports.com/weaknesses/CWE-119\nDescription: The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This\n\nBuffer Errors [CWE-119] — The Hacktivists - Medium\nhttps://thehacktivists.medium.com/buffer-errors-cwe-119-the-hacktivists-69ce72da59f9\n// Buffer Errors [CWE-119] vulnerable code example// (c) HTB Research#include \"StdAfx.h\"#include <stdlib.h>#include <stdio.h>#include <string> int main( int argc, char *argv[] ){  char input_data[20];  printf (\"Enter your data: \");  scanf (\"%s\", input_data);  return 0;} This weakness describes a case where a pointer or its index is used to access data beyond the bounds of the intended buffer, resulting in access to potentially sensitive information, application crash or code execution. **❏ CWE-786:** Access of Memory Location Before Start of Buffer   If the vulnerability is present in software and exploitation of buffer overflow results in an application crash, it should be scored as C:N/I:N/A:H.\n\nCWE-119\nhttps://www.security-database.com/cwe.php?name=CWE-119\n| Integrity | Technical Impact: *Execute unauthorized code or commands; Memory corruption*  If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. | ParentOf | Weakness BaseWeakness Base | 120 | Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') | **Development Concepts **(primary)**699**  **Research Concepts **(primary)**1000** |  | | ParentOf | Weakness BaseWeakness Base | 786 | Access of Memory Location Before Start of Buffer | **Development Concepts **(primary)**699**  **Research Concepts **(primary)**1000** |  |\n\nCVE-2023-3953 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/cve-2023-3953\nNVD - cve-2023-3953 This is a potential security issue, you are being redirected to https://nvd.nist.gov **Secure .gov websites use HTTPS** *   Vulnerability Metrics Expand or CollapseCVSS v4.0 Calculators CVSS v3.x Calculators CVSS v2.0 Calculator    NVD **NIST:**NVD Image 8: NIST CVSS score matches with CNA score **NIST:**NVD Please address comments about this page to nvd@nist.gov. | https://download.schneider-electric.com/files? p_Doc_Ref=SEVD-2023-220-01&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2023-220-01.pdf | CVE, Schneider Electric SE | Vendor Advisory | | CWE-119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | Image 10: cwe source acceptance levelNIST Schneider Electric SE | | Added | Reference |  | https://download.schneider-electric.com/files? #### **CVE Modified by Schneider Electric SE 5/14/2024 9:35:42 AM** | Changed | Reference Type | https://download.schneider-electric.com/files? p_Doc_Ref=SEVD-2023-220-01&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2023-220-01.pdf No Types Assigned | https://download.schneider-electric.com/files? **NVD Last Modified:**\n",
    "query": "CWE-119 details"
  },
  "CWE-706": {
    "summary": "CWE-706 - Use of Incorrectly-Resolved Name or Reference\nhttps://appsec.backslash.security/cwe/706\nCWE-706 - Use of Incorrectly-Resolved Name or Reference - Details and CVSS Score Image 1: Backslash LogoCWE DATABASE AboutGET A DEMO Backslash Vulnerability DatabaseImage 2Use of Incorrectly-Resolved Name or Reference Image 3 Use of Incorrectly-Resolved Name or Reference ### Per technology (GHSA, All time) Image 4 The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere. *   Image 5: LinkedIn Icon *   Image 6: Facebook Icon *   Image 7: X Icon *   Image 8: Link Icon ### Recently published GHSA *   GHSA-8pmp-678w-c8xx *   GHSA-v26r-4c9c-h3j6 *   GHSA-v784-fjjh-f8r4 *   GHSA-wxcx-gg9c-fwp2 *   GHSA-qw9g-7549-7wg5 Get a Demo Image 9: Backslash Logo *   Image 13: X Logo *   Image 14: LinkedIn Logo\n\nCVE-2024-53739 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-53739\nWeakness Enumeration. CWE-ID, CWE Name, Source. CWE-706, Use of Incorrectly-Resolved Name or Reference, cwe source acceptance level NIST. CWE-98\n\nCVE-2025-24733 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-24733\nWeakness Enumeration. CWE-ID, CWE Name, Source. CWE-706, Use of Incorrectly-Resolved Name or Reference, cwe source acceptance level NIST. CWE-98\n\nUse of Incorrectly-Resolved Name or Reference CWE-706 - Feedly\nhttps://feedly.com/cve/cwe/706\n| CVE-2025-48136Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') vulnerability in Estatik Mortgage Calculator Estatik allows PHP Local File Inclusion. | CVE-2024-53739Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') vulnerability in Cool Plugins Cryptocurrency Widgets For Elementor allows PHP Local File Inclusion.This issue affects Cryptocurrency Widgets For Elementor: from n/a through 1.6.4. | CVE-2021-37315Incorrect Access Control issue discoverd in Cloud Disk in ASUS RT-AC68U router firmware version before 3.0.0.4.386.41634 allows remote attackers to write arbitrary files via improper sanitation on the source for COPY and MOVE operations. | CVE-2019-6289uploads/include/dialog/select\\_soft.php in DedeCMS V57\\_UTF8\\_SP2 allows remote attackers to execute arbitrary PHP code by uploading with a safe file extension and then renaming with a mixed-case variation of the .php extension, as demonstrated by the 1.pHP filename.\n\nCWE 706: Abstraction and Simplification in Programming ...\nhttps://www.clouddefense.ai/cwe/definitions/706\nThis CWE entry focuses on the importance of abstraction in computer programming to simplify complex systems, enhance modularity, maintainability, scalability,\n",
    "query": "CWE-706 details"
  },
  "CWE-617": {
    "summary": "CWE-617 - Reachable Assertion - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/617\nCWE-617 - The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior\n\nCommon Mayhem CWE Finds: Reachable Assertion\nhttps://www.mayhem.security/blog/common-mayhem-cwe-finds-reachable-assertion\n#include <assert.h> A reachable assertion — also known as CWE-617 for all you security nerds out there — is a vulnerability where an assertion can be explicitly triggered due to user input, causing the underlying application to abort at an unexpected and potentially unsafe time. #include <assert.h> assert(a < 100); If a bad actor is able to trigger an assertion in an application such as this, it would abort the entire program, disconnecting all active connections and resulting in a denial of service. Rather than asserting that a condition is true, you can instead throw an exception (or simply handle the improper condition without throwing any errors at all), which can give your application an opportunity to adapt to the circumstances and recover from it. assert( b != 0 ); example: example.cpp:7: double division(int, int): Assertion `b != 0' failed.\n\nCWE Rule 617 - Reachable Assertion - MATLAB - MathWorks\nhttps://it.mathworks.com/help/bugfinder/ref/cwe617.html\nRule Description. The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other\n\nCWE-617 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-617\n# Your connection is not private Attackers might be trying to steal your information from **www.security-database.com** (for example, passwords, messages, or credit cards). Learn more about this warning net::ERR\\_CERT\\_DATE\\_INVALID Subject: www.security-database.com Issuer: R11 Expires on: Aug 24, 2025 Current date: Oct 17, 2025 PEM encoded chain: -----BEGIN CERTIFICATE-----   MIIFEDCCA/igAwIBAgISBoBz37kaMu8CZ5hNEuN/VGQQMA0GCSqGSIb3DQEBCwUA   MDMxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQwwCgYDVQQD   EwNSMTEwHhcNMjUwNTI2MTg1NTA0WhcNMjUwODI0MTg1NTAzWjAkMSIwIAYDVQQD   OabUS/1NhFDLUBkXvbP+zLW1WGAK6NzZvbKxX2lQCU5J/dY3nE92iWigeunGv+R4   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   WghiDLZsMwhN1zjtSC0uBWiugF3vTNzYIEFfaPG7Ws3jDrAMMYebQ95JQ+HIBD/R   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   -----END CERTIFICATE----- This server could not prove that it is **www.security-database.com**; its security certificate expired 54 days ago. This may be caused by a misconfiguration or an attacker intercepting your connection. Your computer's clock is currently set to Friday, October 17, 2025. If not, you should correct your system's clock and then refresh this page. Proceed to www.security-database.com (unsafe)\n\nCVE-2025-49630: CWE-617 Reachable Assertion in Apache ...\nhttps://radar.offseq.com/threat/cve-2025-49630-cwe-617-reachable-assertion-in-apac-3d5250cb\nIn certain proxy configurations, a denial of service attack against Apache HTTP Server versions 2.4.26 through to 2.4.63 can be triggered by untrusted clients causing an assertion in mod\\_proxy\\_http2. CVE-2025-49630 is a high-severity vulnerability affecting Apache HTTP Server versions 2.4.26 through 2.4.63. Germany, France, United Kingdom, Netherlands, Italy, Spain, Sweden, Belgium, Poland, Austria In certain proxy configurations, a denial of service attack against Apache HTTP Server versions 2.4.26 through to 2.4.63 can be triggered by untrusted clients causing an assertion in mod\\_proxy\\_http2. CVE-2025-49630 is a high-severity vulnerability affecting Apache HTTP Server versions 2.4.26 through 2.4.63. Germany, France, United Kingdom, Netherlands, Italy, Spain, Sweden, Belgium, Poland, Austria CVE-2025-49630 is a high-severity vulnerability affecting Apache HTTP Server versions 2.4.26 through 2.4.63.\n",
    "query": "CWE-617 information"
  },
  "CWE-22": {
    "summary": "What is directory traversal? - Fastly\nhttps://www.fastly.com/learning/application-attacks/what-is-directory-traversal\nDirectory traversal, also known as “path traversal” (and identified with CWE-22), is a web application vulnerability that enables attackers to access unintended files on an underlying filesystem. In ManageEngine Desktop Central builds prior to 10.1.2127.1, a directory traversal in file upload functionality allowed for arbitrary file writes by manipulating the “computerName” parameter (or a few others) to include traversal sequences. There are several strategies that can be used to prevent traversal vulnerabilities, including design changes to prevent building file paths with user input, strict validation of input, using path canonicalization, and limiting application access. Directory traversal, also known as “path traversal,” is a web application vulnerability that enables attackers to access unintended files on an underlying filesystem.\n\nSecurity Fix: Path Traversal Vulnerability (CWE-22) · Advisory - GitHub\nhttps://github.com/StuffAnThings/qbit_manage/security/advisories/GHSA-vh56-26wq-vvfv\nA path traversal vulnerability (CWE-22) exists in qbit\\_manage's web API that allows authenticated users to read arbitrary files from the server filesystem through the `restore_config_from_backup` endpoint. **Technical Details:** The vulnerability allows attackers to bypass directory restrictions and read arbitrary files from the server filesystem by manipulating the `backup_id` parameter with path traversal sequences (e.g., `../`). # VULNERABLE CODE (before fix) backup_filename = request get \"backup_id\" # From request body backup_file_path = self backup_path/ backup_filename# No validation!\n\nCWE-22 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-22\nPath Traversal. A path traversal and file disclosure vulnerability was found in Apache HTTP Server 2.4.49. Attackers could use this vulnerability to map URLs\n\nCWE-22: Improper Limitation of a Pathname to a Restricted Directory\nhttps://svenruppert.com/2024/05/21/cwe-22-improper-limitation-of-a-pathname-to-a-restricted-directory/\nIf the `fileName` parameter is not properly validated, an attacker can manipulate it to access files outside the `/var/www/uploads/` directory, such as `/etc/passwd`, by using a path traversal sequence (`../../etc/passwd`). To exploit a path traversal vulnerability, an attacker typically uses special characters and patterns in the input to navigate the file system. Several Java libraries and tools can help developers prevent CWE-22 (Path Traversal) vulnerabilities by providing robust input validation, path normalisation, and security mechanisms. The OWASP ESAPI library provides a comprehensive set of security controls, including file-handling utilities that can help prevent path traversal attacks. **Details**: This vulnerability allowed attackers to access files outside the intended directories via a path traversal attack, leveraging improper file path validation in the application.\n\nPrevent unauthorized access through path traversal (CWE-22) - Heise\nhttps://www.heise.de/en/background/Secure-coding-Prevent-unauthorized-access-through-path-traversal-CWE-22-9994863.html\nIf the `fileName` parameter is not properly validated, an attacker can manipulate it to access files outside the /var/www/uploads/ directory, such as /etc/passwd, by using a path traversal sequence (`. To exploit a path traversal vulnerability, an attacker typically uses special characters and patterns in the input to navigate through the file system. @WebServlet(\"/download\") public class FileDownloadServlet extends HttpServlet { protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String fileName = request.getParameter(\"file\"); File file = new File(\"/var/www/uploads/\" + fileName); if (file.exists()) { FileInputStream fis = new FileInputStream(file); response.setContentType(\"application/octet-stream\"); response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + file.getName() + \"\\\"\"); byte[] buffer = new byte[4096]; int bytesRead; while ((bytesRead = fis.read(buffer)) != -1) { response.getOutputStream().write(buffer, 0, bytesRead); } fis.close(); } else { response.sendError(HttpServletResponse.SC_NOT_FOUND); } } } By understanding the nature of CWE-22 and implementing robust security measures, developers can significantly reduce the risk of unauthorized file access and protect their applications from potential exploitation.\n",
    "query": "CWE-22 Path Traversal"
  },
  "CWE-319": {
    "summary": "CWE-319: Cleartext Transmission of Sensitive Information\nhttps://cwe.mitre.org/data/definitions/319.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-319: Cleartext Transmission of Sensitive Information  |  | | --- | | Weakness ID: 319   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 311 | Missing Encryption of Sensitive Data | | ParentOf | Variant - a weakness that is linked to a certain type of product, typically involving a specific language or technology. | 5 | J2EE Misconfiguration: Data Transmission Without Encryption | | ParentOf | Variant - a weakness that is linked to a certain type of product, typically involving a specific language or technology.\n\nCWE-319\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-319\nCWE Discovery | HackerOne CWE Discovery | **CWE ID** | **Name** | **Number of reports** | | **CWE-79** | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 112,631 | | **CWE-200** | Exposure of Sensitive Information to an Unauthorized Actor | 78,986 | | **CWE-284** | Improper Access Control | 46,085 | | **CWE-287** | Improper Authentication | 22,308 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,719 | | **CWE-285** | Improper Authorization | 7,073 | | **CWE-922** | Insecure Storage of Sensitive Information | 5,955 | | **CWE-312** | Cleartext Storage of Sensitive Information | 5,193 | | **CWE-215** | Insertion of Sensitive Information Into Debugging Code | 5,061 | CWE-319\n\nUnveiling the Dangers of CWE-319: Clear Text ...\nhttps://medium.com/@georgeppmc/unveiling-the-dangers-of-cwe-319-clear-text-transmission-of-sensitive-information-1ada2d1f4ca5\nIn my quest as a bug bounty hunter, I recently encountered a vulnerability known as CWE-319: Clear Text Transmission of Sensitive Information.( some developers don’t think its much of an issue.) This blog post aims to shed light on the dangers associated with this vulnerability and how attackers can exploit it to carry out attacks on unsecured networks. Although my recent submission for a bug bounty program turned out to be a duplicate (meaning another hacker found and reported the vulnerability before I did) the company still thanked me for my submission and the experience taught me valuable lessons about the dangers associated with CWE-319: Clear Text Transmission of Sensitive information\n\nCWE-319 - Cleartext Transmission of Sensitive Information\nhttps://appsec.backslash.security/cwe/319\nBackslash Vulnerability Database Cleartext Transmission of Sensitive Information The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. Many communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. As a result, network traffic could be sniffed by adversaries, spilling security-critical data. Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications. Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.\n\nCWE-319 Web Vulnerability & Security Checks\nhttps://www.invicti.com/web-vulnerability-scanner/vulnerabilities/classification/cwe-319/\nCWE-319 Web Vulnerability & Security Checks | Invicti Image 1: Invicti Logo - The Largest Dynamic Application Security Solutions Provider In The WorldImage 2: Invicti Logo - The Largest Dynamic Application Security Solutions Provider In The WorldImage 3: Invicti Logo - The Largest Dynamic Application Security Solutions Provider In The World100% Signal 0% NoiseImage 4: Invicti Logo - The Largest Dynamic Application Security Solutions Provider In The WorldGet a demo *   Web Application Security Image 5: Web Application Vulnerabilities Index PCI v3.2-6.5.4, CAPEC-65, CWE-319, ISO27001-A.14.1.3, WASC-4, OWASP 2013-A6, OWASP 2017-A3, CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N  PCI v3.2-6.5.4, CAPEC-65, CWE-319, ISO27001-A.14.1.3, WASC-4, OWASP 2013-A6, OWASP 2017-A3, CVSS:3.0/AV:A/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N  Image 6: Invicti Logo - The Largest Dynamic Application Security Solutions Provider In The World Invicti Security Corp  *   WEB SECURITY\n",
    "query": "CWE-319 details"
  },
  "CWE-19": {
    "summary": "CWE-19 - Data Handling - CyberSecurity Help\nhttps://www.cybersecurity-help.cz/vdb/cwe/19/\nCWE-19 - Data Handling. Description. Weaknesses in this category are typically found in functionality that processes data. Latest vulnerabilities for CWE-19.\n\nCWE-CWE-19 CVE - CVE Search - CVE Details - Reconshell\nhttps://cve.reconshell.com/cve?cwe=CWE-19&page=6\nVulnerabilities (CVE) ; Microsoft Office Compatibility Pack SP3 allows remote attackers to execute arbitrary code via a crafted Office document, aka \"Microsoft\n\nCWE - CWE-19 - Data Processing Errors (4.14) | PDF | Xml ... - Scribd\nhttps://www.scribd.com/document/749635098/CWE-CWE-19-Data-Processing-Errors-4-14\nA community-developed list of SW & HW weaknesses that. can become vulnerabilities · CWE CATEGORY: Data Processing Errors. Category ID: 19 · Nature Type ID Name.\n\nCWE-19: Data Handling Vulnerabilities - CloudDefense.AI\nhttps://www.clouddefense.ai/cwe/definitions/19\nExplore vulnerabilities in handling data manipulation. Understand risks in processing inputs and ways to prevent security issues. Learn more about CWE-19.\n\nCWE Definitions list and vulnerabilities for CWE entries - CVE Details\nhttps://www.cvedetails.com/cwe-definitions/19/cwelist.html?order=1&trc=944&sha=e460d5341f00ae4eecf9e812db95edeeb1981059\nCommon Weakness Enumeration (CWE™) is a list of common software and hardware weakness types that have security ramifications. A “weakness” is a condition in\n",
    "query": "CWE-19 details"
  },
  "CWE-1284": {
    "summary": "CWE-1284: Improper Validation of Specified Quantity in Input\nhttps://cwe.mitre.org/data/definitions/1284.html\n| |  |  | | --- | --- | | CWE Glossary Definition |  | |  | |    CWE-1284: Improper Validation of Specified Quantity in Input  |  | | --- | | Weakness ID: 1284   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 20 | Improper Input Validation | | ParentOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE-1284 - Improper Validation of Specified Quantity in Input\nhttps://appsec.backslash.security/cwe/1284/\nBackslash Vulnerability Database Improper Validation of Specified Quantity in Input # Improper Validation of Specified Quantity in Input ## CWE-1284 ### CVSS severity (NVD, All Time) #### Short description The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties. #### Extended description #### Strategy: Input Validation Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules.\n\nCWE 1284 Improper Validation of Specified Quantity in Input\nhttps://www.cvedetails.com/cwe-details/1284/Improper-Validation-of-Specified-Quantity-in-Input.html\nCWE-1284 : Improper Validation of Specified Quantity in Input. The product receives input that is expected to specify a quantity (such as size or length), but\n\nCVE-2025-0038: CWE-1284 - Live Threat Intelligence | OffSeq.com\nhttps://radar.offseq.com/threat/cve-2025-0038-cwe-1284-improper-validation-of-spec-acb882e2\nCVE-2025-0038: CWE-1284 - Improper Validation of Specified Quantity in Input in AMD Kria(TM) SOM. Severity: medium. Type: vulnerability. CVE:\n\nCVE-2025-58835 - CVE Record\nhttps://www.cve.org/CVERecord?id=CVE-2025-58835\nCWE 1 Total. Learn more · CWE-1284: CWE-1284 Improper Validation of Specified Quantity in Input. CVSS 1 Total. Learn more. Score, Severity\n",
    "query": "CWE-1284"
  },
  "CWE-763": {
    "summary": "CVE-2021-22760 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2021-22760\nDescription. A CWE-763: Release of invalid pointer or reference vulnerability exists inIGSS Definition (Def.exe) V15.0.0.21140 and prior\n\nCWE 763 Release of Invalid Pointer or Reference - CVE Details\nhttps://www.cvedetails.com/cwe-details/763/Release-of-Invalid-Pointer-or-Reference.html\nCWE-763 : Release of Invalid Pointer or Reference. The product attempts to return a memory resource to the system, but it calls the wrong release function or\n\nCWE-763: Release of Invalid Pointer or Reference (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/763.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-763: Release of Invalid Pointer or Reference  |  | | --- | | Weakness ID: 763   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE Rule 763 - Release of Invalid Pointer or Reference - MathWorks\nhttps://www.mathworks.com/help/bugfinder/ref/cwe763.html\nThe application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly.\n\nCWE CATEGORY: Comprehensive Categorization: Memory Safety\nhttps://cwe.mitre.org/data/definitions/1399.html\n| 129 | Improper Validation of Array Index | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 763 | Release of Invalid Pointer or Reference | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 786 | Access of Memory Location Before Start of Buffer | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n",
    "query": "CWE-763"
  },
  "CWE-295": {
    "summary": "CWE 295 Improper Certificate Validation - CVE Details\nhttps://www.cvedetails.com/cwe-details/295/cwe.html\n# CWE-295 : Improper Certificate Validation CAPEC-459 Creating a Rogue Certification Authority Certificate An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their \"to be signed\" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.\n\nCWE-295 - Improper Certificate Validation - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/295\nCWE DATABASE Backslash Vulnerability Database Improper Certificate Validation # Improper Certificate Validation ## CWE-295 ### Overtime trend (NVD) ### CVSS severity (NVD, All Time) ### Per technology (GHSA, All time) #### Short description The product does not validate, or incorrectly validates, a certificate. #### Extended description When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. ### Phase: Architecture and Design; Implementation Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key. ### Phase: Implementation If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.\n\nCWE-295: Improper Certificate Validation (4.18)\nhttps://cwe.mitre.org/data/definitions/295.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-295: Improper Certificate Validation  |  | | --- | | Weakness ID: 295   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\n[CVE-2023-33201] CWE-295: Improper Certificate Validation\nhttps://ossindex.sonatype.org/vulnerability/CVE-2023-33201?compon=\nThe vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation\n\nAn improper certificate validation vulnerability [CWE-295... - GitHub\nhttps://github.com/advisories/GHSA-49fh-c382-5964\nAn improper certificate validation vulnerability [CWE-295] in FortiWeb 7.2.0 through 7.2.1, 7.0 all versions, 6.4 all versions and 6.3 all\n",
    "query": "CWE-295"
  },
  "CWE-129": {
    "summary": "CWE-129: Improper Validation of Array Index (4.18)\nhttps://cwe.mitre.org/data/definitions/129.html\nAn improperly validated array index might lead directly to the always-incorrect behavior of \"access of array using out-of-bounds index.\"  Taxonomy Mappings  | Mapped Taxonomy Name | Node ID | Fit | Mapped Node Name | | --- | --- | --- | --- | | CLASP | Unchecked array indexing | | PLOVER | INDEX - Array index overflow | | CERT C Secure Coding | ARR00-C | Understand how arrays work | | CERT C Secure Coding | ARR30-C | CWE More Specific | Do not form or use out-of-bounds pointers or array subscripts | | CERT C Secure Coding | ARR38-C | Do not add or subtract an integer to a pointer if the resulting value does not refer to a valid array element | | CERT C Secure Coding | INT32-C | Ensure that operations on signed integers do not result in overflow | | SEI CERT Perl Coding Standard | IDS32-PL | Imprecise | Validate any integer that is used as an array index | | OMG ASCSM | ASCSM-CWE-129 | | Software Fault Patterns | SFP8 | Faulty Buffer Access |  Related Attack Patterns  | CAPEC-ID | Attack Pattern Name | | --- | --- | | CAPEC-100 | Overflow Buffers |  |  |  | | --- | --- | | [REF-7] | Michael Howard and David LeBlanc.\n\nCWE 129 Improper Validation of Array Index\nhttps://www.cvedetails.com/cwe-details/129/Improper-Validation-of-Array-Index.html\nVulnerabilities  Created: 2006-07-19 Updated: 2025-09-09 Source:https://cwe.mitre.org/data/definitions/129.html Vulnerabilities related to CWE-129 Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. Image 2: SecurityScorecard SecurityScorecard  CVE is a registred trademark of the MITRE Corporation and the authoritative source of CVE content is MITRE's CVE web site. CWE is a registred trademark of the MITRE Corporation and the authoritative source of CWE content is MITRE's CWE web site. OVAL is a registered trademark of The MITRE Corporation and the authoritative source of OVAL content is MITRE's OVAL web site. By using this web site you are agreeing to CVEdetails.com terms of use!\n\nCWE Rule 129 - Improper Validation of Array Index\nhttps://de.mathworks.com/help/bugfinder/ref/cwe129.html\nThis issue occurs when you access an array by using an index that is obtained from unsecure sources and which has not been validated. **Example — Use Index to Return Buffer Value** #include  #include  #define SIZE100 100 extern int tab[SIZE100]; static int tainted_int_source(void) { return strtol(getenv(\"INDEX\"),NULL,10); } int taintedarrayindex(void) { int num = tainted_int_source(); return tab[num];//Noncompliant } The index `num` is obtained from an unsecure source and the function `taintedarrayindex` does not check to see if `num` is inside the range of `tab`. **Correction — Check Operand Values** One possible correction is to check the values of the operands before performing the modulo operation. * (English) * (English) + English + English\n\nCWE-129\nhttps://www.security-database.com/cwe.php?name=CWE-129\n# Your connection is not private Attackers might be trying to steal your information from **www.security-database.com** (for example, passwords, messages, or credit cards). Learn more about this warning net::ERR\\_CERT\\_DATE\\_INVALID Subject: www.security-database.com Issuer: R11 Expires on: Aug 24, 2025 Current date: Sep 19, 2025 PEM encoded chain: -----BEGIN CERTIFICATE-----   MIIFEDCCA/igAwIBAgISBoBz37kaMu8CZ5hNEuN/VGQQMA0GCSqGSIb3DQEBCwUA   MDMxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQwwCgYDVQQD   EwNSMTEwHhcNMjUwNTI2MTg1NTA0WhcNMjUwODI0MTg1NTAzWjAkMSIwIAYDVQQD   OabUS/1NhFDLUBkXvbP+zLW1WGAK6NzZvbKxX2lQCU5J/dY3nE92iWigeunGv+R4   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   WghiDLZsMwhN1zjtSC0uBWiugF3vTNzYIEFfaPG7Ws3jDrAMMYebQ95JQ+HIBD/R   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   -----END CERTIFICATE----- This server could not prove that it is **www.security-database.com**; its security certificate expired 26 days ago. This may be caused by a misconfiguration or an attacker intercepting your connection. Your computer's clock is currently set to Friday, September 19, 2025. If not, you should correct your system's clock and then refresh this page. Proceed to www.security-database.com (unsafe)\n\nHi, I want to know how to fix \"Improper Validation of Array ...\nhttps://community.veracode.com/s/question/0D53n00008TFVD3CAP/hii-want-to-know-how-to-fix-improper-validation-of-array-index-\nWhen you visit any website, it may store or retrieve information on your browser, mostly in the form of cookies. You can set your browser to block or alert you about these cookies, but some parts of the site will not then work. These cookies do not store any personally identifiable information. These cookies allow us to count visits and traffic sources so we can measure and improve the performance of our site. If you do not allow these cookies we will not know when you have visited our site, and will not be able to monitor its performance. These cookies may be set through our site by our advertising partners.\n",
    "query": "CWE-129"
  },
  "CWE-426": {
    "summary": "CWE-426: Untrusted Search Path (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/426.html\n| CWE-426: Untrusted Search Path  |  | | --- | | Weakness ID: 426   Vulnerability Mapping: ALLOWED This CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review (with careful review of mapping notes)   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. However, because the program does not modify the PATH environment variable, the following attack would work:  (attack code)  * The user sets the PATH to reference a directory under the attacker's control, such as \"/my/dir/\".\n\nCWE Definitions list and vulnerabilities for CWE entries - CVE Details\nhttps://www.cvedetails.com/cwe-definitions/8/cwelist.html?order=1&trc=668&sha=0427874cc45423ccb6974ee25935fbfceac76fcb\nCWE Definitions ; CWE-437, Incomplete Model of Endpoint Features, Vulnerabilities ; CWE-439, Behavioral Change in New Version or Environment, Vulnerabilities ; CWE\n\n[PDF] CWE. Knowing What Could Make Software Vulnerable to Attack - DTIC\nhttps://apps.dtic.mil/sti/tr/pdf/ADA558070.pdf\n○ Links Technical Impacts (derived from CWE weaknesses) with business implications. ○ More fine-grained model than the CIA Triad. 1. Modify\n\nCWE-426 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-426\nThis includes the PATH environment variable, LD\\_LIBRARY\\_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\", \"effectiveness\": null, \"effectivenessNotes\": null } The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. This program is also potentially vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended.\n\nCWEs vs OWASP top 10? - DEV Community\nhttps://dev.to/caffiendkitten/cwes-vs-owasp-top-10-4imm\nThe difference is in the details. OWASP top 10 is the main category ... Google AI - Official AI Model and Platform Partner. Google AI is\n",
    "query": "CWE-426 \"model\" \"details\""
  },
  "CWE-264": {
    "summary": "CWE-264: Handling of Permissions and Access Control Weaknesses\nhttps://www.clouddefense.ai/cwe/definitions/264\n# CWE-264: Handling of Permissions and Access Control Weaknesses Deficiencies within CWE 264 pertain to the handling of permissions, privileges, and security functionalities for executing access control. Deficiencies within this specific category pertain to the handling of permissions, privileges, and additional security functionalities utilized for executing access control. | MemberOf | 1345 | CWE-1345: Broken Access Control: Weaknesses in OWASP Top Ten (2021) | The utilization of this CWE ID to denote actual vulnerabilities is forbidden. There are possible alternatives that focus on weaknesses which can be categorized under Improper Access Control (CWE-284). | 2008-09-08 | CWE Content Team | MITRE | | 2010-02-16 | CWE Content Team | MITRE | | 2011-03-29 | CWE Content Team | MITRE |\n\nCVE-2025-58282: CWE-264 Permissions, Privileges, and Access ...\nhttps://radar.offseq.com/threat/cve-2025-58282-cwe-264-permissions-privileges-and--e67bb8c6\nCVE-2025-58282 is a permission control vulnerability classified under CWE-264 affecting the camera module in Huawei's HarmonyOS versions\n\nCVE-2023-22633 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-22633\nAn improper permissions, privileges, and access controls vulnerability [CWE-264] in FortiNAC-F 7.2. ... CWE-264, Permissions, Privileges\n\nCWE CATEGORY: Permissions, Privileges, and Access Controls\nhttps://cwe.mitre.org/data/definitions/264.html\n| |  |  | | --- | --- | | CWE Glossary Definition |  | |  | |    CWE CATEGORY: Permissions, Privileges, and Access Controls  |  | | --- | | Category ID: 264   Vulnerability Mapping: PROHIBITED This CWE ID must not be used to map to real-world vulnerabilities |  Summary  Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control. | 1345 | OWASP Top Ten 2021 Category A01:2021 - Broken Access Control |  Vulnerability Mapping Notes  |  | | --- | | Usage: PROHIBITED  (this CWE ID must not be used to map to real-world vulnerabilities) | | Reason:  Category | | Rationale: This entry is a Category.\n\nCWE-264 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=CWE-264\nThe Common Weakness Enumeration Discovery Index shows platform-wide data of instances, and severity and remediation time distributions. CWE data extracted every\n",
    "query": "CWE-264"
  },
  "CWE-17": {
    "summary": "CWE.17 - Alternate Coding System Oid Data Type (HL7 v2.8) - Caristix\nhttps://hl7-definition-staging.caristix.com/v2/HL7v2.8/DataTypes/CWE.17\nHL7 CWE.17 - This component contains the ISO Object Identifier (OID) for the coding system or value set named in CWE.6. Analogous to CWE.14 Coding System\n\nCWE-17 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-17\nSecurity-Database help your corporation foresee and avoid any security risks that may impact your IT infrastructure and business applications.\n\nCWE-17: CWE CATEGORY: DEPRECATED: Code (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/17.html\nThis entry has been deprecated. It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary\n\nCase study of CWE-17 DoS vulnerability. (a) build_l4proto_dccp ...\nhttps://www.researchgate.net/figure/Case-study-of-CWE-17-DoS-vulnerability-a-build-l4proto-dccp-without-module-check-leads_fig8_394074600\nVulnerability detection in software systems is a critical challenge due to the increasing complexity of code and the rising frequency of security\n\nCWE Definitions list and vulnerabilities for CWE entries - CVE Details\nhttps://www.cvedetails.com/cwe-definitions/17/cwelist.html?order=3&trc=938&sha=29ad19bb04476ff1cba0d39cdfb5d273032a8ed4\nCommon Weakness Enumeration (CWE™) is a list of common software and hardware weakness types that have security ramifications. A “weakness” is a condition in\n",
    "query": "CWE-17"
  },
  "CWE-665": {
    "summary": "CWE Rule 665 - Improper Initialization - MATLAB\nhttps://www.mathworks.com/help//bugfinder/ref/cwe665.html\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\nCWE-665: Improper Initialization (4.18) - MITRE Corporation\nhttps://cwe.mitre.org/data/definitions/665.html\n| | CVE-2005-1036 | Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap | | CVE-2008-3597 | chain: game server can access player data structures before initialization has happened leading to NULL dereference | | CVE-2009-2692 | chain: uninitialized function pointers can be dereferenced allowing code execution | | CVE-2009-0949 | chain: improper initialization of memory can lead to NULL dereference | | CVE-2009-3620 | chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference |  Weakness Ordinalities  | Ordinality | Description | | --- | --- | | Primary | (where the weakness exists independent of other weaknesses) |  Resultant | (where the weakness is typically related to the presence of some other weaknesses) |  Detection Methods  | Method | Details | | --- | --- | | Automated Dynamic Analysis | This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection.\n\nCWE-665: Improper Initialization - The Vulnerability History Project\nhttps://alpha.vulnerabilityhistory.org/tags/cwe-665\n\"The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\nCWE-665: Improper Initialization - CVEFeed.io\nhttps://cvefeed.io/cwe/detail/cwe-665-improper-initialization\nThe product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed\n\nCWE-665: Uninitialized Value Vulnerability - CloudDefense.AI\nhttps://www.clouddefense.ai/cwe/definitions/665\nLearn about the CWE 665 vulnerability, which involves using variables or data without proper initialization, leading to unpredictable behaviors in software.\n",
    "query": "CWE-665 Improper Initialization"
  },
  "CWE-416": {
    "summary": "CWE-416 Vulnerability Overview, How to Fix & Prevent It - Backslash\nhttps://www.backslash.security/blog/cwe-416\nCWE-416, or \"Use-After-Free,\" is a type of vulnerability that occurs when a program continues to use a memory location after it has been freed. 1. **Identify the Vulnerable Code**: Use static analysis tools to detect use-after-free vulnerabilities in your codebase. 4. **Static Analysis Tools**: Integrate static analysis tools into your development pipeline to continuously scan your code for potential vulnerabilities, including CWE-416. To prevent CWE-416 vulnerabilities, static analysis tools are designed to effectively identify and mitigate use-after-free issues. Backslash Security’s SAST/SCA tools stand out by offering precise and comprehensive static analysis, ensuring that use-after-free vulnerabilities like CWE-416 are detected and addressed efficiently. CWE-416, the use-after-free vulnerability, poses significant risks to software security.\n\nCWE 416 Use After Free - CVE Details\nhttps://www.cvedetails.com/cwe-details/416/Use-After-Free.html\n# CWE-416 : Use After Free The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer. Source: https://cwe.mitre.org/data/definitions/416.html Vulnerabilities related to CWE-416 ### Related CAPEC definitions No related CAPEC definitions found Please note that CWE definitions are provided as a quick reference only. Visit http://cwe.mitre.org/ for a complete list of CWE entries This web site uses cookies for managing your session, storing preferences, website analytics and additional purposes\n\nCVE-2024-8422 - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-8422\nChange History2 change records found show changes **Initial Analysis by NIST 10/16/2024 2:00:10 PM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | CVSS V3.1 |  | ``` NIST AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H ``` | | Added | CPE Configuration |  | ``` OR *cpe:2.3:a:schneider-electric:zelio_soft_2:*:*:*:*:*:*:*:* versions up to (excluding) 5.4.2.2 ``` | | Changed | Reference Type | ``` https://download.schneider-electric.com/files? p_Doc_Ref=SEVD-2024-282-06&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2024-282-06.pdf Vendor Advisory ``` |  **New CVE Received from Schneider Electric SE 10/08/2024 6:15:04 AM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | Description |  | ``` CWE-416: Use After Free vulnerability exists that could cause arbitrary code execution, denial of service and loss of confidentiality & integrity when application user opens a malicious Zelio Soft 2 project file.\n\nCWE-416 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-416\nCWE Discovery | HackerOne CWE Discovery | **CWE ID** | **Name** | **Number of reports** | | **CWE-284** | Improper Access Control | 47,543 | | **CWE-287** | Improper Authentication | 22,489 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,813 | | **CWE-285** | Improper Authorization | 7,208 | | **CWE-20** | Improper Input Validation | 6,277 | | **CWE-119** | Improper Restriction of Operations within the Bounds of a Memory Buffer | 4,125 | CWE-416 A use-after-free vulnerability in setsockopt IPV6_2292PKTOPTIONS allowed attackers to gain kernel access on the PS5. A vulnerability existed in libcurl's TLS session caching mechanism due to a use-after-free issue. A UAF (Use After Free) vulnerability was discovered in the renderer implementation of the Ethereum wallet.\n\nCWE Rule 416 - Use After Free - MATLAB - MathWorks\nhttps://la.mathworks.com/help/bugfinder/ref/cwe416.html\nRule Description. Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.\n",
    "query": "CWE-416: Use-after-free"
  },
  "CWE-494": {
    "summary": "CWE-494 - Download of Code Without Integrity Check - Details and ...\nhttps://appsec.backslash.security/cwe/494\nCWE-494 - The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and\n\nVulnerability Details : CVE-2025-1058 - CWE-494\nhttps://www.cvedetails.com/cve/CVE-2025-1058/\nCWE-494: Download of Code Without Integrity Check vulnerability exists that could render the device inoperable when malicious firmware is\n\nCVE-2023-5984 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-5984\np_Doc_Ref=SEVD-2023-318-01&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2023-318-01.pdf ``` |  **CVE Modified by Schneider Electric SE 5/14/2024 10:31:12 AM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- |  **CVE Modified by Schneider Electric SE 12/14/2023 12:15:14 AM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Changed | Description | ``` A CWE-494 Download of Code Without Integrity Check vulnerability exists that could allow modified firmware to be uploaded when an authorized admin user begins a firmware update procedure. p_Doc_Ref=SEVD-2023-318-01&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2023-318-01.pdf Vendor Advisory ``` |  **New CVE Received from Schneider Electric SE 11/14/2023 11:15:19 PM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | Description |  | ``` A CWE-494 Download of Code Without Integrity Check vulnerability exists that could allow modified firmware to be uploaded when an authorized admin user begins a firmware update procedure.\n\nCWE-494: Download of Code Without Integrity Check (4.18)\nhttps://cwe.mitre.org/data/definitions/494.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-494: Download of Code Without Integrity Check  |  | | --- | | Weakness ID: 494   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE-494 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-494\nCWE-494 weakness. Description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying\n",
    "query": "CWE-494 details"
  },
  "CWE-337": {
    "summary": "OWASP Top 10 Compliance with RidgeBot - Ridge Security\nhttps://ridgesecurity.ai/ridgebot/owasp-compliance/\nCWE-337—Predictable Seed in Pseudo- Random Number Generator (PRNG); CWE-338 ... The built-in report provides exact details of every Top 10 category and CWE tested\n\nPredictable Seed in Pseudo-Random Number Generator (PRNG)\nhttps://feedly.com/cve/cwe/337\nPredictable Seed in Pseudo-Random Number Generator (PRNG). CWE-337 ; CVE-2020-28597A predictable seed vulnerability exists in the password reset functionality of\n\nCWE 337 Predictable Seed in Pseudo-Random ... - CVE Details\nhttps://www.cvedetails.com/cwe-details/337/Predictable-Seed-in-Pseudo-Random-Number-Generator-PRNG-.html\nA Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.\n\nCVE-2025-55069: CWE-337 Predictable Seed in Pseudo-Random ...\nhttps://radar.offseq.com/threat/cve-2025-55069-cwe-337-predictable-seed-in-pseudo--2d156863\nThis weakness falls under CWE-337 (Predictable Seed in PRNG), a known class of vulnerabilities that can lead to the compromise of cryptographic keys generated\n\nCWE-337 Details | ByteOS Network\nhttps://www.byteos.network/cwes/CWE-337\nThe use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers\n",
    "query": "CWE-337 details"
  },
  "CWE-203": {
    "summary": "CVE-2025-23182 - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-23182\nThis CVE record has been marked for NVD enrichment efforts. Description. CWE-203: Observable Discrepancy. Metrics. CVSS Version 4.0. CVSS\n\nCWE-203: Observable Discrepancy (4.18) - MITRE Corporation\nhttps://cwe.mitre.org/data/definitions/203.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-203: Observable Discrepancy  |  | | --- | | Weakness ID: 203   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 208 | Observable Timing Discrepancy | | ParentOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE-203: Observable Discrepancy - The Vulnerability History Project\nhttps://vulnerabilityhistory.org/tags/cwe-203\n# CWE-203: Observable Discrepancy | CVE-2015-1218 | Moving a script element to a new document with the same context document removes the script completely. | Bad-Pointer-Function  aka CVE-2020-27170 | This entry focuses on an issue dealing with specific subsystem within the linux kernel. | I Spy a Discrepancy  aka CVE-2021-33624 | An attack which exploits branch misprediction and is identified when a bad actor bypasses array bounds and attempts to leak data from a victim's memory. | Open Blinds in Namespaces  aka CVE-2021-38209 | The connection tracker for Linux's networking framework was not correctly protecting write access to three global variables for certain network environments, causing changes in one environment to be reflected in other environments....\n\nObservable Discrepancy CWE-203 - Feedly\nhttps://feedly.com/cve/cwe/203\nThis vulnerability allows an unauthenticated attacker to bypass this protection by submitting arbitrary userIDs to the select account page and distinguishing\n\nCVE-2024-42343 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/cve-2024-42343\nThird Party Advisory. Weakness Enumeration. CWE-ID, CWE Name, Source. CWE-203, Observable Discrepancy, cwe source acceptance level NIST. CWE-204\n",
    "query": "CWE-203"
  },
  "CWE-190": {
    "summary": "CWE 190 Integer Overflow or Wraparound - CVE Details\nhttps://www.cvedetails.com/cwe-details/190/Integer-Overflow-or-Wraparound.html\n# CWE-190 : Integer Overflow or Wraparound the original value. This occurs when an integer value is incremented to a value that is too large to store in the When this occurs, the value may CAPEC-92 Forced Integer Overflow This attack forces an integer variable to go out of range. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. This web site uses cookies for managing your session, storing preferences, website analytics and additional purposes\n\nCWE-190 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-190\nAn integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When\n\nCWE Discovery - Integer Overflow or Wraparound - HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=CWE-190\nCWE-190 ... The product performs a calculation that can\\n produce an integer overflow or wraparound when the logic\\n assumes that the resulting value will always\n\nCWE-190: Integer Overflow or Wraparound (4.18)\nhttps://cwe.mitre.org/data/definitions/190.html\nThe product performs a calculation that can produce an integer overflow or wraparound when the logic assumes that the resulting value will always be larger\n\nIs \"CWE-190 Integer Overflow or Wraparound\" an issue in CPython ...\nhttps://discuss.python.org/t/is-cwe-190-integer-overflow-or-wraparound-an-issue-in-cpython-or-not/85808\nI am part of a OpenSSF group writing documentation on secure coding in Python and we are scratching our heads if overflow’s, as per CWE-190, can be an issue or not. So in Python3.14,.0a3 ([MSC v.1942 64 bit (AMD64)] on win32) even though `sys.float_max *10 == float('Infinity')`, `float(int(sys.float_max) * 10)` does produce an Overflow error: >python -c \"import sys; print(float(int(sys.float_info.max) * 10))\" Overflows in `Decimal` raise an exception, while the CWE states that the issue is “the logic assumes that the resulting value will always be larger than the original value.” Since there is no “resulting value” for the logic to assume anything about, CWE-190 doesn’t apply. Under closer inspection one could say that the Python type commonly known as ‘int’ is apparently a numbers.Integral and therefore does not qualify for CWE-190.\n",
    "query": "CWE-190 Integer Overflow or Wraparound"
  },
  "CWE-281": {
    "summary": "Cooperative Work Experience (CWE)\nhttps://catalog.clackamas.edu/course-descriptions/cwe/\nCWE-281 Cooperative Work Experience Seminar. 0 credits, Fall/Winter/Spring/Summer. The seminar provides an opportunity to develop the career management skills\n\nCooperative Work Experience (CWE)\nhttps://catalog.clackamas.edu/cooperative-work-experience-cwe/\nAll CWE courses have a required co-requisite course, CWE-281 Cooperative Work Experience Seminar. You must complete this course during the term(s) you are\n\nCVE-2025-26693: CWE-281 Improper Preservation of Permissions ...\nhttps://radar.offseq.com/threat/cve-2025-26693-cwe-281-improper-preservation-of-pe-ba0e1c85\nThe issue is classified under CWE-281, which pertains to improper preservation of permissions. This vulnerability allows a local attacker to\n\nTrellix Agent: CVE-2023-0975: CWE-281 - Rapid7\nhttps://www.rapid7.com/db/vulnerabilities/trellix-agent-cve-2023-0975/\n# Trellix Agent: CVE-2023-0975: CWE-281: Improper Preservation of Permissions Try Surface Command | Severity | CVSS | Published | Added | Modified | | 7 | (AV:L/AC:M/Au:S/C:C/I:C/A:C) | Mar 30, 2023 | Apr 4, 2023 | Aug 11, 2025 | Severity CVSS (AV:L/AC:M/Au:S/C:C/I:C/A:C) Published Added Modified A vulnerability exists in Trellix Agent for Windows version 5.7.8 and earlier, that allows local users, during install/upgrade workflow, to replace one of the Agent’s executables before it can be executed. This allows the user to elevate their permissions. trellix-agent-upgrade-5-7-9-139 * CVE-2023-0975 * MCAFEE-SB10396 * URL-https://cve.mitre.org/cgi-bin/cvename.cgi? name=CVE-2023-0975 * URL-https://kcm.trellix.com/corporate/index? page=content&id=SB10396 * URL-https://nvd.nist.gov/vuln/detail/CVE-2023-0975 ### Explore Exposure Command Confidently identify and prioritize exposures from endpoint to cloud with full attack surface visibility and threat-aware risk context. Try it today\n\nCWE-281: Improper Preservation of Permissions\nhttps://cwe.mitre.org/data/definitions/281.html\nThis CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities. Comments.\n",
    "query": "CWE-281"
  },
  "CWE-254": {
    "summary": "CWE-254: Authentication & Access Control Focus - CloudDefense.AI\nhttps://www.clouddefense.ai/cwe/definitions/254\n# CWE-254: Authentication & Access Control Focus This CWE focuses on authentication, access control, confidentiality, cryptography, and privilege management. | HasMember | 256 | CWE-256: Passwords in Memory to Plaintext Storage | | HasMember | 258 | CWE-258: Password Length Requirement Not Met | | HasMember | 259 | CWE-259: Hard-Coded Password | | HasMember | 260 | CWE-260: Passwords Not Stored Safely | | HasMember | 261 | CWE-261: Weak Cryptographic Algorithms | | HasMember | 272 | CWE-272: Inadequate Access Control | | HasMember | 284 | CWE-284: Access Control Issues | | HasMember | 285 | CWE-285: Improper Authorization | | HasMember | 359 | CWE-359: Exposure of Private Information | | HasMember | 798 | CWE-798: Vulnerability in Authentication Mechanisms |\n\n7PK - Security Features\nhttps://www.martellosecurity.com/kb/mitre/cwe/254/\nA category in the Common Weakness Enumeration published by The MITRE Corporation. Source. CWE Catalog - 4.17. Identifier. CWE-254. Status. Incomplete. Contents.\n\nCVE-2014-5414 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2014-5414\nCWE-ID, CWE Name, Source. CWE-254, 7PK - Security Features, cwe source acceptance level NIST. Known Affected Software Configurations Switch to CPE 2.2. CPEs\n\nCWE-254 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-254\n# Your connection is not private Attackers might be trying to steal your information from **www.security-database.com** (for example, passwords, messages, or credit cards). Learn more about this warning net::ERR\\_CERT\\_DATE\\_INVALID Subject: www.security-database.com Issuer: R11 Expires on: Aug 24, 2025 Current date: Oct 17, 2025 PEM encoded chain: -----BEGIN CERTIFICATE-----   MIIFEDCCA/igAwIBAgISBoBz37kaMu8CZ5hNEuN/VGQQMA0GCSqGSIb3DQEBCwUA   MDMxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQwwCgYDVQQD   EwNSMTEwHhcNMjUwNTI2MTg1NTA0WhcNMjUwODI0MTg1NTAzWjAkMSIwIAYDVQQD   OabUS/1NhFDLUBkXvbP+zLW1WGAK6NzZvbKxX2lQCU5J/dY3nE92iWigeunGv+R4   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   WghiDLZsMwhN1zjtSC0uBWiugF3vTNzYIEFfaPG7Ws3jDrAMMYebQ95JQ+HIBD/R   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   -----END CERTIFICATE----- This server could not prove that it is **www.security-database.com**; its security certificate expired 54 days ago. This may be caused by a misconfiguration or an attacker intercepting your connection. Your computer's clock is currently set to Friday, October 17, 2025. If not, you should correct your system's clock and then refresh this page. Proceed to www.security-database.com (unsafe)\n\nCWE-CWE-254 CVE - CVE Search - CVE Details - Reconshell\nhttps://cve.reconshell.com/cve?cwe=CWE-254&page=7\nMicrosoft Internet Explorer 9 through 11 mishandles .url files from the Internet zone, which allows remote attackers to bypass intended access restrictions via\n",
    "query": "CWE-254"
  },
  "CWE-436": {
    "summary": "CWE Version 3.0 - Mitre\nhttps://cwe.mitre.org/data/published/cwe_v3.0.pdf\n... Information Exposure ... 436: Interpretation Conflict\n\nCWE Version 4.10 - Mitre\nhttps://cwe.mitre.org/data/published/cwe_v4.10.pdf\n... 436: Interpretation Conflict ... Information Exposure through Microarchitectural State after\n\nMeasurements of the Most Significant Software Security ...\nhttps://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=930459\nby CC Galhardo · 2020 · Cited by 25 — CWE-436 Interpretation Confict. 22.40. 17. 7.19. Table 3: 2019 MSSW Top 20 ... CWE-200 Information Exposure. 32.12. 5. CWE-125 Out-of-bounds Read. 26.53. 6. CWE\n\nCWE coverage for JavaScript and TypeScript - CodeQL - GitHub\nhttps://codeql.github.com/codeql-query-help/javascript-cwe/\nInformation exposure through a stack trace. CWE-200, JavaScript/TypeScript, js ... CWE-436, JavaScript/TypeScript, js/insecure-http-parser, Insecure http\n\nCWE Version 4.15 - Mitre\nhttps://cwe.mitre.org/data/published/cwe_v4.15.pdf\n... 436. CWE-173: Improper Handling of Alternate Encoding ... Information Exposure through Microarchitectural State after\n",
    "query": "CWE-436 \"Information Exposure\""
  },
  "CWE-273": {
    "summary": "CWE-273: Improper Check for Dropped Privileges (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/273.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-273: Improper Check for Dropped Privileges  |  | | --- | | Weakness ID: 273   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. It is not a complete list of all CVEs that are related to this CWE entry.*  | Reference | Description | | --- | --- | | CVE-2006-4447 | Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.\n\nSecurity Bulletin: Multiple vulnerabilities in IBM Cloud Pak for ...\nhttps://www.ibm.com/support/pages/security-bulletin-multiple-vulnerabilities-ibm-cloud-pak-multicloud-management-2\n... vulnerability to obtain sensitive information. CWE: CWE-273: Improper Check for Dropped Privileges CVSS Source: IBM X-Force CVSS Base score: 6.5. CVSS Vector\n\nImproper Check for Dropped Privileges CWE-273\nhttps://feedly.com/cve/cwe/273\nCVE-2025-1003A potential vulnerability has been identified in HP Anyware Agent for Linux which might allow for authentication bypass which may result in\n\nCWE Definitions list and vulnerabilities for CWE entries\nhttps://www.cvedetails.com/cwe-definitions/15/cwelist.html?order=3&trc=940&sha=15cee01a618cf4fe58ffcff1b3b2aae9fb075012\nCWE-273, Improper Check for Dropped Privileges, Vulnerabilities ; CWE-272, Least Privilege Violation, Vulnerabilities ; CWE-271, Privilege Dropping / Lowering\n\nCWE-273\nhttps://www.security-database.com/cwe.php?name=CWE-273\nThis issue is likely to occur in restrictive environments in which the operating system or application provides fine-grained control over privilege management.\n",
    "query": "CWE-273 vulnerability details"
  },
  "CWE-354": {
    "summary": "CWE-354: Improper Validation of Integrity Check Value\nhttps://cwe.mitre.org/data/definitions/354.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-354: Improper Validation of Integrity Check Value  |  | | --- | | Weakness ID: 354   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 1214 | Data Integrity Issues |  Relevant to the view \"Weaknesses for Simplified Mapping of Published Vulnerabilities\" (View-1003) | Nature | Type | ID | Name | | --- | --- | --- | --- | | ChildOf | Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology.\n\nHitachi Energy MACH GWS | CISA\nhttps://www.cisa.gov/news-events/ics-advisories/icsa-25-289-11\nIMPROPER VALIDATION OF INTEGRITY CHECK VALUE CWE-354. A vulnerability exists in the IEC 61850 of the MACH GWS product where an IEC 61850-8\n\nImproper Validation of firmware Integrity - PSIRT | FortiGuard Labs\nhttps://www.fortiguard.com/psirt/FG-IR-23-461\nAn improper validation of integrity check value vulnerability [CWE-354] in FortiNDR may allow an authenticated attacker with at least Read\n\nCWE Rule 354 - Improper Validation of Integrity Check Value\nhttps://www.mathworks.com/help/bugfinder/ref/cwe354.html\nRule Description. The product does not validate or incorrectly validates the integrity check values or \"checksums\" of a message.\n\nCVE-2025-3479 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-3479\nWeakness Enumeration. CWE-ID, CWE Name, Source. CWE-354, Improper Validation of Integrity Check Value, Wordfence. Known Affected Software\n",
    "query": "CWE-354"
  },
  "CWE-358": {
    "summary": "CWE-358: Improperly Implemented Security Check for Standard\nhttps://cwe.mitre.org/data/definitions/358.html\n| |  |  | | --- | --- | | CWE Glossary Definition |  | |  | |    CWE-358: Improperly Implemented Security Check for Standard  |  | | --- | | Weakness ID: 358   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCVE-2025-62583: CWE-358 Improperly Implemented Security ...\nhttps://radar.offseq.com/threat/cve-2025-62583-cwe-358-improperly-implemented-secu-51576771\nCVE-2025-62583 is a security vulnerability identified in the NAVER Whale browser, specifically affecting versions prior to 4.33.325.17.\n\nCVE-2025-62585: CWE-358 Improperly Implemented Security ...\nhttps://radar.offseq.com/threat/cve-2025-62585-cwe-358-improperly-implemented-secu-17c01d07\nCVE-2025-62585 is a security vulnerability identified in the NAVER Whale browser, specifically affecting versions before 4.33.325.17. The\n\nShow CWE-358: Improperly Implemented Security Check for Standard\nhttps://cxsecurity.com/cwe/CWE-358/\nAn improperly implemented security check for standard vulnerability [CWE-358] in FortiADC Web Application Firewall (WAF) 7.4.0 through 7.4.4, 7.2 all\n\nCVE-2024-55599 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-55599\nDescription. An Improperly Implemented Security Check for Standard vulnerability [CWE-358] in FortiOS version 7.6.0, version 7.4.7 and below\n",
    "query": "CWE-358"
  },
  "CWE-94": {
    "summary": "CWE-94: Improper Control of Generation of Code ('Code Injection')\nhttps://cwe.mitre.org/data/definitions/94.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-94: Improper Control of Generation of Code ('Code Injection')  |  | | --- | | Weakness ID: 94   Vulnerability Mapping: ALLOWED This CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review  (with careful review of mapping notes)  Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. It is not a complete list of all CVEs that are related to this CWE entry.*  | Reference | Description | | --- | --- | | CVE-2023-29374 | Math component in an LLM framework translates user input into a Python expression that is input into the Python exec() method, allowing code execution - one variant of a \"prompt injection\" attack.\n\nCode Injection [CWE-94] - ImmuniWeb\nhttps://www.immuniweb.com/vulnerability/code-injection.html\n* CWE-94: Code Injection ImmuniWeb > CWE Knowledge Base > Code Injection [CWE-94] # Code Injection [CWE-94] Code Injection [CWE-94]? Basically an attacker might be able to inject and execute arbitrary code within the application. An attacker is able to pass in the \"param\" parameter arbitrary PHP code which will be executed:   This weakness may allow an attacker to execute arbitrary code within the application and to compromise the vulnerable system. Let’s have a look at PHP code injection vulnerability in TinyWebGallery descibed in HTB23093 (CVE-2012-2931). `SecRule ARGS:user \"!^([a-zA-Z]+)$\" \"phase:2,rev:'2',ver:'HTBRIDGE /0.1',maturity:'9',accuracy:'7', t:none,ctl:auditLogParts=+E, block,msg:'PHP Code Injection in TinyWebGallery HTB23093 ',id:'1000000007',severity:'2', logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}', capture,tag:'HTBRIDGE/WEB_ATTACK/PHP',setvar:'tx.msg=%{rule.msg}'\"` 1. CWE-94: Improper Control of Generation of Code ('Code Injection') [cwe.mitre.org] Code Injection Vulnerabilities, Exploits and Examples\n\nCWE 94 Improper Control of Generation of Code ('Code Injection')\nhttps://www.cvedetails.com/cwe-details/94/Improper-Control-of-Generation-of-Code-Code-Injection-.html\n# CWE-94 : Improper Control of Generation of Code ('Code Injection') This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application. CAPEC-35 Leverage Executable Code in Non-Executable Files When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. CAPEC-77 Manipulating User-Controlled Variables This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth).\n\nCWE-94 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-94\nCWE Discovery | HackerOne CWE Discovery | **CWE ID** | **Name** | **Number of reports** | | **CWE-79** | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 115,396 | | **CWE-284** | Improper Access Control | 49,030 | | **CWE-287** | Improper Authentication | 22,720 | | **CWE-89** | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 12,836 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,932 | | **CWE-285** | Improper Authorization | 7,444 | | **CWE-77** | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 4,812 | | **CWE-78** | Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') | 4,616 | CWE-94\n\nCode Injection [CWE-94] — The Hacktivists - Medium\nhttps://thehacktivists.medium.com/code-injection-cwe-94-the-hacktivists-a0acfbfc0df9\n# Code Injection [CWE-94] — The Hacktivists Basically, an attacker might be able to inject and execute arbitrary code within the application. This weakness may allow an attacker to execute arbitrary code within the application and compromise the vulnerable system. Any software that evaluates untrusted input or uses it to construct code is potentially vulnerable to this weakness. If injection occurs within the javascript code, the maximum potential impact is cross-site scripting. But if injection occurs within PHP code, the vulnerability could be used to compromise the entire system, and it should be scored as:   [## Cross-Site Scripting — XSS [CWE-79] — The Hacktivists ### Cross-Site scripting or XSS is a weakness that is caused by improper neutralization of input during web page generation.](/cross-site-scripting-xss-cwe-79-the-hacktivists-e45883aae16e?\n",
    "query": "CWE-94"
  },
  "CWE-476": {
    "summary": "CWE-476 - NULL Pointer Dereference - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-476\nCWE Discovery | HackerOne CWE Discovery | **CWE ID** | **Name** | **Number of reports** | | **CWE-79** | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 115,417 | | **CWE-284** | Improper Access Control | 49,057 | | **CWE-287** | Improper Authentication | 22,727 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,940 | | **CWE-285** | Improper Authorization | 7,452 | | **CWE-20** | Improper Input Validation | 6,505 | | **CWE-77** | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 4,815 | CWE-476 A null pointer dereference vulnerability was discovered in mod_proxy in Apache HTTP Server versions 2.4.59 and earlier.\n\nNULL Pointer Dereference [CWE-476] — The Hacktivists - Medium\nhttps://thehacktivists.medium.com/null-pointer-dereference-cwe-476-the-hacktivists-d3ceb2a7ade1\n# NULL Pointer Dereference [CWE-476] — The Hacktivists // NULL Pointer Dereference [CWE-476] vulnerable code example    // (c) HTB Research    #undef UNICODE    #include \"StdAfx.h\"    #include <winsock2.h>    #include <ws2tcpip.h>    #include <stdio.h>    #pragma comment (lib, \"Ws2_32.lib\")         int __cdecl main(int argc, char **argv)    {            WSADATA wsaData;            int iResult;            INT iRetval;                 DWORD dwRetval;            int i = 1;            struct addrinfo *result = NULL;            struct addrinfo *ptr = NULL;            struct addrinfo hints;                 if(argc<2){                    printf(\"usage: %s <proto> <hostname> <servicename>\\n\", argv[0]);                    return 1;            }                       iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);            if (iResult != 0) {                    printf(\"WSAStartup failed: %d\\n\", iResult);                    return 1;            }            ZeroMemory( &hints, sizeof(hints) );            hints.ai_family = AF_UNSPEC;            hints.ai_socktype = SOCK_STREAM;            hints.ai_protocol = IPPROTO_TCP;            dwRetval = getaddrinfo(argv[2], argv[3], &hints, &result);                 if ( dwRetval != 0 ) {                    printf(\"getaddrinfo failed with error: %d\\n\", dwRetval);                    WSACleanup();                    return 1;            }            printf(\"getaddrinfo returned success\\n\");            return 0;    } If a high-privileged application, such as a driver or critical system service contains a NULL pointer dereference error, it should be scored with complete availability impact, since the crash of such application may render the system inaccessible: **4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C) — Medium severity.**\n\nCWE-476: NULL Pointer Dereference (4.18) - MITRE Corporation\nhttps://cwe.mitre.org/data/definitions/476.html\nCWE Glossary Definition[![Image 5: x](https://cwe.mitre.org/images/layout/close.gif)](javascript:styledPopupClose();) [](https://cwe.mitre.org/data/definitions/476.html) CWE-476: NULL Pointer Dereference --------------------------------- Weakness ID: 476 [Vulnerability Mapping](https://cwe.mitre.org/data/definitions/476.html#Vulnerability_Mapping_Notes_476):ALLOWED This CWE ID may be used to map to real-world vulnerabilities Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | [465](https://cwe.mitre.org/data/definitions/465.html) | Pointer Issues | [![Image 23: +](https://cwe.mitre.org/images/head_more.gif)](javascript:toggleblocksOC('476_1003_relevant_table');)Relevant to the view \"Weaknesses for Simplified Mapping of Published Vulnerabilities\" (View-1003) | Nature | Type | ID | Name | | --- | --- | --- | --- | | ChildOf | ![Image 24: Class](https://cwe.mitre.org/images/icons/class.gif)Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology.\n\nCWE 476 NULL Pointer Dereference - CVE Details\nhttps://www.cvedetails.com/cwe-details/476/NULL-Pointer-Dereference.html\nCWE 476 NULL Pointer Dereference powered by SecurityScorecard Vulnerabilities  Vulnerable Software  Vulnerability Intel. My Attack SurfaceDigital FootprintDiscovered ProductsDetected VulnsIP Search CWE-476 : NULL Pointer Dereference Created: 2006-07-19 Updated: 2025-09-09 Source:https://cwe.mitre.org/data/definitions/476.html Vulnerabilities related to CWE-476 Image 2: SecurityScorecard SecurityScorecard  CVE is a registred trademark of the MITRE Corporation and the authoritative source of CVE content is MITRE's CVE web site. CWE is a registred trademark of the MITRE Corporation and the authoritative source of CWE content is MITRE's CWE web site. OVAL is a registered trademark of The MITRE Corporation and the authoritative source of OVAL content is MITRE's OVAL web site. By using this web site you are agreeing to CVEdetails.com terms of use!\n\nCWE-476: NULL Pointer Dereference | Vulnerability History Project\nhttps://vulnerabilityhistory.org/tags/cwe-476\n\"A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.\n",
    "query": "CWE-476 Null Pointer Dereference"
  },
  "CWE-121": {
    "summary": "CWE Rule 121 - Stack-based Buffer Overflow - MATLAB - MathWorks\nhttps://www.mathworks.com/help/bugfinder/ref/cwe121.html\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a\n\nThreat Advisory: CVE-2025-32756 – Critical Stack-Based Buffer ...\nhttps://www.integrity360.com/insights-threat-advisories-cve-2025-32756\n# Threat Advisory: CVE-2025-32756 – Critical Stack-Based Buffer Overflow in Fortinet Products # Threat Advisory: CVE-2025-32756 – Critical Stack-Based Buffer Overflow in Fortinet Products CVE-2025-32756 is a critical stack-based buffer overflow vulnerability (CWE-121) affecting multiple Fortinet products, including FortiVoice, FortiMail, FortiNDR, FortiRecorder, and FortiCamera. Fortinet has confirmed active exploitation of this vulnerability in the wild, particularly targeting FortiVoice systems. Attackers can exploit this flaw by sending specially crafted HTTP requests, leading to a stack overflow that allows overwriting critical memory addresses and executing arbitrary code with root-level privileges. Fortinet has observed active exploitation of CVE-2025-32756, particularly targeting FortiVoice systems. CVE-2025-32756 is a severe, actively exploited vulnerability that poses a significant threat to organisations using Fortinet products.\n\nCWE-121 - Stack-based Buffer Overflow - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/121\nCWE DATABASE Backslash Vulnerability Database Stack-based Buffer Overflow # Stack-based Buffer Overflow A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. D3-SFCV (Stack Frame Canary Validation) from D3FEND discusses canary-based detection in detail. Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Examples include Address Space Layout Randomization (ASLR) and Position-Independent Executables (PIE). ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking.\n\nCWE-121 - Stack-based Buffer Overflow - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-121\nCWE Discovery | HackerOne CWE Discovery | **CWE ID** | **Name** | **Number of reports** | | **CWE-287** | Improper Authentication | 22,450 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,791 | | **CWE-285** | Improper Authorization | 7,170 | CWE-121 A Stack Buffer Overflow vulnerability was found in CS:GO that could lead to Arbitrary Code Execution due to an unchecked texture file name with TEXTUREFLAGS_DEPTHRENDERTARGET being set. [[Switch, PIA/MK8DX] Stack buffer overflow and potential RCE in PIA (LAN/LDN, possibly NEX) room info deserialization](https://hackerone.com/reports/2611669) The vulnerability was a stack buffer overflow and potential remote code execution issue in the LAN/LDN and possibly NEX room information deserialization process of the PIA application on the Nintendo Switch.\n\nCVE-2022-30306 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/cve-2022-30306\nThis is a potential security issue, you are being redirected to https://nvd.nist.gov NVD Enrichment data supplied by the NVD may require amendment due to these changes.DescriptionA stack-based buffer overflow vulnerability [CWE-121] in the CA sign functionality of FortiWeb version 7.0.1 and below, 6.4 all versions, version 6.3.19 and below may allow an authenticated attacker to achieve arbitrary code execution via specifically crafted password.Metrics CVSS Version 4.0 CVSS Version 3.x CVSS Version 2.0NVD enrichment efforts reference publicly available information to associate vector strings. Please address comments about this page to nvd@nist.gov.HyperlinkResourcehttps://fortiguard.com/psirt/FG-IR-22-167Patch  Vendor Advisory https://fortiguard.com/psirt/FG-IR-22-167Patch  Vendor Advisory Weakness EnumerationCWE-IDCWE NameSourceCWE-787Out-of-bounds Write NIST  CWE-121Stack-based Buffer OverflowFortinet, Inc. *cpe:2.3:a:fortinet:fortiweb:7.0.1:*:*:*:*:*:*:*ChangedReference Typehttps://fortiguard.com/psirt/FG-IR-22-167 No Types Assignedhttps://fortiguard.com/psirt/FG-IR-22-167 Patch, Vendor AdvisoryQuick InfoCVE Dictionary Entry:CVE-2022-30306NVD Published Date:02/16/2023NVD Last Modified:11/21/2024Source:Fortinet, Inc.\n",
    "query": "CWE-121 Stack-based Buffer Overflow"
  },
  "CWE-770": {
    "summary": "CVE-2025-1059 : CWE-770: Allocation of Resources ... - CVE Details\nhttps://www.cvedetails.com/cve/CVE-2025-1059/\nCWE-770: Allocation of Resources Without Limits or Throttling vulnerability exists that could cause communications to stop when malicious packets are sent\n\nCWE-770 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=CWE-770\nCWE Discovery | HackerOne | **CWE ID** | **Name** | **Number of reports** | | **CWE-20** | Improper Input Validation | 6,336 | CWE-770 A vulnerability was reported in the Django web framework's urlize() function, which could lead to a denial-of-service attack. CVE-2024-56374: Potential denial-of-service vulnerability in IPv6 validation A potential denial-of-service vulnerability was discovered in the IPv6 validation functions of Django. CVE-2023-38039 is a security vulnerability in the curl library that allowed a malicious server to send an unlimited number of headers in an HTTP response, causing curl to exhaust heap memory and potentially leading to a denial-of-service condition. CVE-2024-45230: Potential denial-of-service vulnerability in django.utils.html.urlize() The django.utils.html.urlize and urlizetrunc functions were affected by a potential denial-of-service vulnerability.\n\nCWE-770: Allocation of Resources Without Limits or Throttling (4.18)\nhttps://cwe.mitre.org/data/definitions/770.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-770: Allocation of Resources Without Limits or Throttling  |  | | --- | | Weakness ID: 770   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | | CVE-2020-15100 | web application scanner attempts to read an excessively large file created by a user, causing process termination | | CVE-2020-7218 | Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service |  Detection Methods  | Method | Details | | --- | --- | | Manual Static Analysis | Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints.\n\nAllocation of Resources Without Limits or Throttling CWE-770 - Feedly\nhttps://feedly.com/cve/cwe/770\nCWE-770. CVE-2025-9784A flaw was found in Undertow where malformed client requests can trigger server-side stream resets without triggering abuse counters.\n\nCWE-770 - Allocation of Resources Without Limits or Throttling\nhttps://appsec.backslash.security/cwe/770\nAllocation of Resources Without Limits or Throttling # Allocation of Resources Without Limits or Throttling Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. It simply requires more resources on the part of the attacker. #### Strategy: Resource Limitation Use resource-limiting settings provided by the operating system or environment. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users.\n",
    "query": "CWE-770 details"
  },
  "CWE-843": {
    "summary": "CWE-843: Access of Resource Using Incompatible Type ... - Mitre\nhttps://cwe.mitre.org/data/definitions/843.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-843: Access of Resource Using Incompatible Type ('Type Confusion')  |  | | --- | | Weakness ID: 843   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 136 | Type Errors |  Relevant to the view \"Weaknesses for Simplified Mapping of Published Vulnerabilities\" (View-1003) | Nature | Type | ID | Name | | --- | --- | --- | --- | | ChildOf | Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology.\n\nCWE-843: Access of Resource Using Incompatible Type ('Type ...\nhttps://vulnerabilityhistory.org/tags/cwe-843\nCWE-843: Access of Resource Using Incompatible Type ('Type Confusion'). \"The product allocates or initializes a resource such as a pointer, object, or variable\n\nCWE 843 Access of Resource Using Incompatible Type ('Type ...\nhttps://www.cvedetails.com/cwe-details/843/Access-of-Resource-Using-Incompatible-Type-Type-Confusion-.html\nCWE 843 Access of Resource Using Incompatible Type ('Type Confusion') powered by SecurityScorecard Vulnerabilities  My Attack SurfaceDigital FootprintDiscovered ProductsDetected VulnsIP Search CWE-843 : Access of Resource Using Incompatible Type ('Type Confusion') Created: 2011-05-15 Updated: 2023-10-26 Source:https://cwe.mitre.org/data/definitions/843.html Vulnerabilities related to CWE-843 Image 2: SecurityScorecard SecurityScorecard  CVE is a registred trademark of the MITRE Corporation and the authoritative source of CVE content is MITRE's CVE web site. CWE is a registred trademark of the MITRE Corporation and the authoritative source of CWE content is MITRE's CWE web site. OVAL is a registered trademark of The MITRE Corporation and the authoritative source of OVAL content is MITRE's OVAL web site. By using this web site you are agreeing to CVEdetails.com terms of use!\n\nCWE Rule 843 - Access of Resource Using Incompatible Type ...\nhttps://www.mathworks.com/help/bugfinder/ref/cwe843.html\nRule Description. The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource\n\nCVE-2025-59233: CWE-843: Access of Resource Using ...\nhttps://radar.offseq.com/threat/cve-2025-59233-cwe-843-access-of-resource-using-in-96187bb9\nType confusion vulnerabilities occur when a program accesses a resource using an incorrect or incompatible type, leading to undefined behavior\n",
    "query": "CWE-843 information"
  },
  "CWE-78": {
    "summary": "CWE 78: OS Command Injection | Java - Veracode\nhttps://www.veracode.com/security/java/cwe-78/\nAPPLICATION SECURITY * Application Security Basics + App Security Testing + Application Security Assessment + Application Security Risk + Application Security Tools + Application Testing Tool + SaaS Application Security + Secure Applications + Software Code Security + Software Security + Web Application Security Testing + Web Application Testing + Web Application Security Standards * Advanced Application Security + Secure Web Application Development - CWE 78: OS Command Injection - CWE 89: SQL Injection - CWE 89: SQL Injection + Vendor Application Security Testing **CWE 78: OS Command Injection** flaws occur if your application executes a native command when the name of, path of, or arguments to the command contain untrusted data (such as input from a web form, cookie, database, etc.).\n\nOS command injection in CLI - PSIRT | FortiGuard Labs - Fortinet\nhttps://fortiguard.fortinet.com/psirt/FG-IR-24-344\nAn improper neutralization of special elements used in an OS command ('OS Command Injection') vulnerability [CWE-78] in FortiDDoS-F CLI may allow a privileged attacker to execute unauthorized code or commands via crafted CLI requests. | FortiDDoS-F 7.2 | Not affected | Not Applicable | | FortiDDoS-F 6.6 | 6.6 all versions | Migrate to a fixed release | | FortiDDoS-F 6.5 | 6.5 all versions | Migrate to a fixed release | | FortiDDoS-F 6.4 | 6.4 all versions | Migrate to a fixed release | | FortiDDoS-F 6.3 | 6.3 all versions | Migrate to a fixed release | | FortiDDoS-F 6.2 | 6.2 all versions | Migrate to a fixed release | This site uses cookies. you consent to the use of these cookies.\n\nCWE 78 Improper Neutralization of Special Elements used in an OS ...\nhttps://www.cvedetails.com/cwe-details/78/Improper-Neutralization-of-Special-Elements-used-in-an-OS-Co.html\n[powered by SecurityScorecard](https://securityscorecard.com/?utm_source=cvedetails) [Metasploit Modules](https://www.cvedetails.com/metasploit-modules/1.html \"Metasploit modules and related CVEs\")[CWE Definitions](https://www.cvedetails.com/cwe-definitions/ \"CWE definitions\")[CAPEC Definitions](https://www.cvedetails.com/capec-definitions/ \"CAPEC definitions\")[Articles](https://securityscorecard.com/research/?utm_source=cvedetails \"Featured research articles from SecurityScorecard\")[Blog](https://securityscorecard.com/blog/?utm_source=cvedetails \"SecurityScorecard blog\") [Vulnerabilities related to CWE-78](https://www.cvedetails.com/vulnerability-list/cwe-78/vulnerabilities.html \"View list of security vulnerabilities related to CWE 78\") [CAPEC-108 Command Line Execution through SQL Injection](https://www.cvedetails.com/capec-definition/CAPEC-108) [CAPEC-15 Command Delimiters](https://www.cvedetails.com/capec-definition/CAPEC-15) [CAPEC-43 Exploiting Multiple Input Interpretation Layers](https://www.cvedetails.com/capec-definition/CAPEC-43) [CAPEC-6 Argument Injection](https://www.cvedetails.com/capec-definition/CAPEC-6) [CAPEC-88 OS Command Injection](https://www.cvedetails.com/capec-definition/CAPEC-88) ![Image 2: SecurityScorecard](https://www.cvedetails.com/img/ssc-logo.svg) [Products](https://securityscorecard.com/product/?utm_source=cvedetails \"SecurityScorecard products. [Solutions](https://securityscorecard.com/solutions?utm_source=cvedetails \"SecurityScorecard Cybersecurity Risk Rating & Third-Party Risk Management Solutions\") [Customers](https://securityscorecard.com/customers/?utm_source=cvedetails \"SecurityScorecard customers\") [Partners](https://securityscorecard.com/partners/?utm_source=cvedetails \"SecurityScorecard partners\") [Resources](https://securityscorecard.com/resources/?utm_source=cvedetails \"SecurityScorecard case studies, reports, ebooks and more resources\") [Company](https://securityscorecard.com/company/?utm_source=cvedetails \"SecurityScorecard company and organization\") [Trust Portal](https://securityscorecard.com/trust/?utm_source=cvedetails \"SecurityScorecard trust portal. [Security Ratings](https://securityscorecard.com/security-rating?utm_source=cvedetails \"SecurityScorecard security ratings\") [Blog](https://securityscorecard.com/blog/?utm_source=cvedetails \"SecurityScorecard blog\") [Contact](https://securityscorecard.com/company/contact-us/?utm_source=cvedetails \"Contact SecurityScorecard\") [Careers](https://securityscorecard.com/company/careers/?utm_source=cvedetails \"SecurityScorecard careers\") [Feedback](https://support.securityscorecard.com/?utm_source=cvedetails \"Feedback\") [](https://www.cvedetails.com/cwe-details/78/Improper-Neutralization-of-Special-Elements-used-in-an-OS-Co.html#top \"Top of the page\")\n\nCWE-78: Improper Neutralization of Special Elements used in an OS ...\nhttps://cwe.mitre.org/data/definitions/78.html\nTaxonomy Mappings  | Mapped Taxonomy Name | Node ID | Fit | Mapped Node Name | | --- | --- | --- | --- | | PLOVER |  |  | OS Command Injection | | OWASP Top Ten 2007 | A3 | CWE More Specific | Malicious File Execution | | OWASP Top Ten 2004 | A6 | CWE More Specific | Injection Flaws | | CERT C Secure Coding | ENV03-C |  | Sanitize the environment when invoking external programs | | CERT C Secure Coding | ENV33-C | CWE More Specific | Do not call system() | | CERT C Secure Coding | STR02-C |  | Sanitize data passed to complex subsystems | | WASC | 31 |  | OS Commanding | | The CERT Oracle Secure Coding Standard for Java (2011) | IDS07-J |  | Do not pass untrusted, unsanitized data to the Runtime.exec() method | | Software Fault Patterns | SFP24 |  | Tainted input to command | | OMG ASCSM | ASCSM-CWE-78 |  |  |  |  |  | | --- | --- | | [REF-140] | Greg Hoglund and Gary McGraw.\n\nHow to fix CWE 78: Improper Neutralization of Special Elements ...\nhttps://community.veracode.com/s/question/0D53n00009OOFsyCAH/how-to-fix-cwe-78-improper-neutralization-of-special-elements-used-in-an-os-command-os-command-injection\nVeracode Static Analysis will report CWE 78 Improper Neutralization of Special Elements used in an OS Command (OS Command Injection) if it can detect that\n",
    "query": "CWE-78 \"OS Command Injection\""
  },
  "CWE-269": {
    "summary": "CVE-2024-8306 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-8306\np_Doc_Ref=SEVD-2024-254-01&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2024-254-01.pdf | Schneider Electric SE | Vendor Advisory | ### Weakness Enumeration | CWE-ID | CWE Name | Source | | --- | --- | --- | | NVD-CWE-noinfo | Insufficient Information | Image 10: cwe source acceptance levelNIST | | CWE-269 | Improper Privilege Management | Schneider Electric SE | ### Known Affected Software Configurations Switch to CPE 2.2 ### CPEs loading, please wait. p_Doc_Ref=SEVD-2024-254-01&p_enDocType=Security+and+Safety+Notice&p_File_Name=SEVD-2024-254-01.pdf Vendor Advisory | #### **New CVE Received from Schneider Electric SE 9/11/2024 11:15:18 AM** | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | Description | | CWE-269: Improper Privilege Management vulnerability exists that could cause unauthorized access, loss of confidentiality, integrity and availability of the workstation when non-admin authenticated user tries to perform privilege escalation by tampering with the binaries.\n\nCWE 269 Improper Privilege Management - CVE Details\nhttps://www.cvedetails.com/cwe-details/269/Improper-Privilege-Management.html\n# CWE-269 : Improper Privilege Management The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor. CAPEC-122 Privilege Abuse An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. CAPEC-233 Privilege Escalation An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform. CAPEC-58 Restful Privilege Elevation An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.\n\nVulnerability Details : CVE-2025-50124\nhttps://www.cvedetails.com/cve/CVE-2025-50124/\n# Vulnerability Details : CVE-2025-50124 Schneider Electric EcoStruxure IT Data Center Expert Improper Privilege Management Privilege Escalation Vulnerability CWE-269: Improper Privilege Management vulnerability exists that could cause privilege escalation when the ## Products affected by CVE-2025-50124 ## Exploit prediction scoring system (EPSS) score for CVE-2025-50124 EPSS Score History score history for CVE-2025-50124\") ## CVSS scores for CVE-2025-50124 | 6.9 | MEDIUM | CVSS:3.1/AV:P/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:H \"Show CVSS vector details\") | 0.3 | 6.0 | Schneider Electric SE | 2025-07-11 | \"Show CVSS vector details\") | N/A | N/A | Schneider Electric SE | 2025-07-11 | | Attack Vector: Physical  Attack Complexity: High  Attack Requirements: Present  Privileges Required: High  User Interaction: None  Confidentiality (VC): High  Integrity (VI): High  Availability (VA): High | | | | | | | ## CWE ids for CVE-2025-50124\n\nCWE-269 - Improper Privilege Management - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/269\nCWE DATABASE Backslash Vulnerability Database Improper Privilege Management # Improper Privilege Management ## CWE-269 ### Overtime trend (NVD) ### CVSS severity (NVD, All Time) ### Per technology (GHSA, All time) The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor. #### Best practices to prevent this CWE ### Phase: Architecture and Design; Operation Very carefully manage the setting, management, and handling of privileges. ### Phase: Architecture and Design #### Strategy: Separation of Privilege Follow the principle of least privilege when assigning access rights to entities in a software system. ### Phase: Architecture and Design #### Strategy: Separation of Privilege Consider following the principle of separation of privilege.\n\nCVE-2025-9068: CWE-269: Improper Privilege Management in ...\nhttps://radar.offseq.com/threat/cve-2025-9068-cwe-269-improper-privilege-managemen-21f0c63f\nCVE-2025-9068 is a vulnerability classified under CWE-269 (Improper Privilege Management) affecting Rockwell Automation FactoryTalk Linx,\n",
    "query": "CWE-269"
  },
  "CWE-787": {
    "summary": "CWE-787 - Out-of-bounds Write - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/787/\nCWE-787 - The product writes data past the end, or before the beginning, of the intended buffer.\n\nCWE 787 Out-of-bounds Write - CVE Details\nhttps://www.cvedetails.com/cwe-details/787/Out-of-bounds-Write.html\nCWE-787 : Out-of-bounds Write The product writes data past the end, or before the beginning, of the intended buffer.\n\nVulnerability Details : CVE-2024-37036 - CWE-787\nhttps://www.cvedetails.com/cve/CVE-2024-37036/\nSchneider Electric Sage 1410 Out-of-Bounds Write Vulnerability Leading to Authentication Bypass via Malformed POST Request * Schneider-electric » Sage 1410 Firmware » Version: * Schneider-electric » Sage 1430 Firmware » Version: * Schneider-electric » Sage 1450 Firmware » Version: * Schneider-electric » Sage 2400 Firmware » Version: * Schneider-electric » Sage 3300 Magnum Firmware » Version: * Schneider-electric » Sage 4400 Firmware » Version: When used together with: Schneider-electric » Sage 1410 » Version: N/A When used together with: Schneider-electric » Sage 1430 » Version: N/A When used together with: Schneider-electric » Sage 1450 » Version: N/A When used together with: Schneider-electric » Sage 2400 » Version: N/A When used together with: Schneider-electric » Sage 3030 Magnum » Version: N/A\n\nCWE-787 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-787\n| CVE-2025-27363 | Font rendering library does not properly handle assigning a signed short value to an unsigned long (CWE-195), leading to an integer wraparound (CWE-190), causing too small of a buffer (CWE-131), leading to an out-of-bounds write (CWE-787). | CVE-2023-1017 | The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to write 2 bytes past the end of a buffer. | CVE-2020-17087 | Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV. | CVE-2019-1010006 | Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).\n\nCWE-787: Out-of-bounds Write (4.18)\nhttps://cwe.mitre.org/data/definitions/787.html\n| 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | | ParentOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | | ParentOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | | ParentOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n",
    "query": "CWE-787 details"
  },
  "CWE-674": {
    "summary": "CWE-674: Uncontrolled Recursion (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/674.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-674: Uncontrolled Recursion  |  | | --- | | Weakness ID: 674   Vulnerability Mapping: ALLOWED This CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review  (with careful review of mapping notes)  Abstraction: Class Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. | 776 | Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') |  Relevant to the view \"Weaknesses for Simplified Mapping of Published Vulnerabilities\" (View-1003) | Nature | Type | ID | Name | | --- | --- | --- | --- | | MemberOf | View - a subset of CWE entries that provides a way of examining CWE content.\n\nCVE-2025-33096: CWE-674 Uncontrolled Recursion in IBM ...\nhttps://radar.offseq.com/threat/cve-2025-33096-cwe-674-uncontrolled-recursion-in-i-d8e26230\nCVE-2025-33096 is a vulnerability classified under CWE-674 (Uncontrolled Recursion) affecting IBM Engineering Requirements Management Doors\n\n[CVE-2023-1436] CWE-674: Uncontrolled Recursion\nhttps://ossindex.sonatype.org/vulnerability/CVE-2023-1436\n[CVE-2023-1436] CWE-674: Uncontrolled Recursion - Sonatype OSS Index Image 1OSS Index *   Who is Sonatype? *   Report a Vulnerability **Authentication is required to use Sonatype OSS Index** This change improves stability and gives you usage tracking and higher request limits. Learn what’s changed CVE-2023-1436 CVSS Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H) vulnId=CVE-2023-1436 [CVE-2023-1436] CWE-674: Uncontrolled Recursion Description An infinite recursion is triggered in Jettison when constructing a JSONArray from a Collection that contains a self-reference in one of its elements. Deviation Notice: Sonatype's research suggests that this CVE's details differ from those defined at NVD or other reporting sources; **sign in for details**. Detailed deviation notices: *    Detailed deviations *    Custom Descriptions [Coming Soon] © 2018-present, Sonatype Inc. *   Sonatype OSS Index *   Sonatype\n\n[CVE-2025-48924] CWE-674: Uncontrolled Recursion\nhttps://ossindex.sonatype.org/vulnerability/CVE-2025-48924\n**Authentication is required to use Sonatype OSS Index** This change improves stability and gives you usage tracking and higher request limits. Learn what’s changed # Vulnerability CVE-2025-48924 Report advisory or correction CVSS Vector CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:N/VA:L/SC:N/SI:N/SA:N \"CVSS vector meaning\") CWE CWE-674 [CVE-2025-48924] CWE-674: Uncontrolled Recursion ## Description Uncontrolled Recursion vulnerability in Apache Commons Lang. This issue affects Apache Commons Lang: Starting with�commons-lang:commons-lang�2.0 to 2.6, and, from org.apache.commons:commons-lang3 3.0 before�3.18.0. Users are recommended to upgrade to version 3.18.0, which fixes the issue. Deviation Notice: Sonatype's research suggests that this CVE's details differ from those defined at NVD or other reporting sources; **sign in for details**. ## Sign up and see: Detailed deviation notices: * Detailed deviations * Custom Descriptions [Coming Soon] Sign Up\n\nCWE Rule 674 - Uncontrolled Recursion - MATLAB - MathWorks\nhttps://www.mathworks.com/help/bugfinder/ref/cwe674.html\nThis rule checker checks for recursive functions that do not update their parameters. The issue occurs when a recursive function passes parameters to its recursive call without correctly updating those parameters, resulting in uncontrolled recursion. For example, in this code snippet, function `myRecursiveFunction` never reaches its base case (`cond < 0`) because the parameter `cond` is not updated in the recursive call inside the `else` branch. Polyspace reports this function as noncompliant because the parameter `var` in the recursive call to `sumTriangular` is not updated, which results in an infinite recursion and a segmentation fault caused by a stack overflow. One possible correction is to update the parameter `var` by decrementing it so that the recursion reaches the base case and exits.\n",
    "query": "CWE-674"
  },
  "CWE-189": {
    "summary": "CWE-189: Numerical Computation or Conversion Deficiencies\nhttps://www.clouddefense.ai/cwe/definitions/189\nThis CWE-189 category highlights issues related to erroneous computation or conversion of numerical values, posing a significant risk in software development. ​.\n\nCWE-189: CWE CATEGORY: Numeric Errors (4.18)\nhttps://cwe.mitre.org/data/definitions/189.html\n| 193 | Off-by-one Error | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 681 | Incorrect Conversion between Numeric Types | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 1335 | Incorrect Bitwise Shift of Integer | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE-189: Numeric Errors - The Vulnerability History Project\nhttps://vulnerabilityhistory.org/tags/cwe-189\n| CVE-2015-6781 | Integer Overflow that allows remote attacker to cause denial of service or possibly have unspecified other impact via modified values in font data. This vulnerability allowed malicious users to perform remote attacks that cause denial of service or random code executions. | CVE-2015-1279 | An integer overflow vulnerability was found in the PDF Reader process that allows attackers to use large height and stride values that caused memory corruption issues (memory modification). | CVE-2014-1744 | Integer overflow in the audio component occurs when a remote attacker sends an overflow value to cause a denial of service or a large shared-memory allocation. aka CVE-2013-0844 | Given a specificly crafted video file, a remote attacker can trigger an array out-of-bounds error causing total shutdown of the service.\n\nThe Common Weakness Enumeration (CWE) List - E2Encrypted\nhttps://www.e2encrypted.com/cve/cwe/all/\nAll the Common Weakness Enumeration (CWE) list in a single page. CWE is a catalog of vulnerabilities found in both software and hardware, created by the\n\nNumeric Errors | Martello Security\nhttps://www.martellosecurity.com/kb/mitre/cwe/189/\nWhen converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the\n",
    "query": "CWE-189 Integer Unexpected Value or Range Error"
  },
  "CWE-77": {
    "summary": "CVE-2022-27083 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/cve-2022-27083\nWeakness Enumeration. CWE-ID, CWE Name, Source. CWE-77, Improper Neutralization of Special Elements used in a Command ('Command Injection'), cwe source\n\nCWE-77 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=CWE-77\n## CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection') Report Submissions (12 week) View on cwe.mitre.org The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. Reports are from public programs that are marked as closed, disclosed, bounty awarded, and swag awarded. The vulnerability was caused by the `Sawyer` library, which allowed an attacker to override built-in methods, and the Redis gem, which used `to_s` and `bytesize` to generate the RESP command. RCE by command line argument injection to `gm convert` in `/edit/process?\n\n[CVE-2021-42740] CWE-77: Improper Neutralization of Special ...\nhttps://ossindex.sonatype.org/vulnerability/CVE-2021-42740\n[CVE-2021-42740] CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection') - CVE-2021-42740.\n\nCVE-2025-59252: CWE-77: Improper Neutralization of Special ...\nhttps://radar.offseq.com/threat/cve-2025-59252-cwe-77-improper-neutralization-of-s-08cd6b00\nIt involves improper neutralization of special elements used in commands (CWE-77), allowing an attacker to inject malicious commands. The\n\nCWE-77: Improper Neutralization of Special Elements used in a ...\nhttps://cwe.mitre.org/data/definitions/77.html\nCWE-77 and its descendants are specifically focused on behaviors in which the product is intentionally building a command to execute.\n",
    "query": "CWE-77 details"
  },
  "CWE-193": {
    "summary": "CWE-193 - Off-by-one Error - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/193\nCWE-193 - A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\nOff-by-one Error [CWE-193] — The Hacktivists - Medium\nhttps://thehacktivists.medium.com/off-by-one-error-cwe-193-the-hacktivists-7a62e9f0068f\n[Sign in](https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Fthehacktivists.medium.com%2Foff-by-one-error-cwe-193-the-hacktivists-7a62e9f0068f&source=post_page---top_nav_layout_nav-----------------------global_nav------------------) [Sign in](https://medium.com/m/signin?operation=login&redirect=https%3A%2F%2Fthehacktivists.medium.com%2Foff-by-one-error-cwe-193-the-hacktivists-7a62e9f0068f&source=post_page---top_nav_layout_nav-----------------------global_nav------------------) [![Image 8: The Hacktivists](https://miro.medium.com/v2/resize:fill:20:20/1*MIP_vqARxVnFaebYh0rZog.png)](https://thehacktivists.medium.com/?source=post_page---author_recirc--7a62e9f0068f----0---------------------a3500180_7321_4e52_ad1a_375f5106d649--------------) [Cross-Site Scripting — XSS [CWE-79] — The Hacktivists ----------------------------------------------------- ### Cross-Site scripting or XSS is a weakness that is caused by improper neutralization of input during web page generation.](https://thehacktivists.medium.com/cross-site-scripting-xss-cwe-79-the-hacktivists-e45883aae16e?source=post_page---author_recirc--7a62e9f0068f----0---------------------a3500180_7321_4e52_ad1a_375f5106d649--------------) [![Image 10: The Hacktivists](https://miro.medium.com/v2/resize:fill:20:20/1*MIP_vqARxVnFaebYh0rZog.png)](https://thehacktivists.medium.com/?source=post_page---author_recirc--7a62e9f0068f----1---------------------a3500180_7321_4e52_ad1a_375f5106d649--------------) [![Image 12: The Hacktivists](https://miro.medium.com/v2/resize:fill:20:20/1*MIP_vqARxVnFaebYh0rZog.png)](https://thehacktivists.medium.com/?source=post_page---author_recirc--7a62e9f0068f----2---------------------a3500180_7321_4e52_ad1a_375f5106d649--------------) [Overly Permissive Cross-domain Whitelist [CWE-942] — The Hacktivists -------------------------------------------------------------------- ### Overly Permissive Cross-domain Whitelist weakness describes a case where the software uses cross-domain policy, which includes domains…](https://thehacktivists.medium.com/overly-permissive-cross-domain-whitelist-cwe-942-the-hacktivists-c72124172a44?source=post_page---author_recirc--7a62e9f0068f----2---------------------a3500180_7321_4e52_ad1a_375f5106d649--------------) [![Image 14: The Hacktivists](https://miro.medium.com/v2/resize:fill:20:20/1*MIP_vqARxVnFaebYh0rZog.png)](https://thehacktivists.medium.com/?source=post_page---author_recirc--7a62e9f0068f----3---------------------a3500180_7321_4e52_ad1a_375f5106d649--------------) [![Image 16: InfoSec Write-ups](https://miro.medium.com/v2/resize:fill:20:20/1*SWJxYWGZzgmBP1D0Qg_3zQ.png)](https://infosecwriteups.com/?source=post_page---read_next_recirc--7a62e9f0068f----0---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [SIDDHANT SHUKLA](https://ghostman01.medium.com/?source=post_page---read_next_recirc--7a62e9f0068f----0---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [11](https://ghostman01.medium.com/503-page-to-critical-bug-00e284eaeebe?source=post_page---read_next_recirc--7a62e9f0068f----0---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [](https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F00e284eaeebe&operation=register&redirect=https%3A%2F%2Finfosecwriteups.com%2F503-page-to-critical-bug-00e284eaeebe&source=---read_next_recirc--7a62e9f0068f----0-----------------bookmark_preview----1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [![Image 18: Ahmadzuriqi](https://miro.medium.com/v2/resize:fill:20:20/1*Fo0A9Alxyd94wc9pYp46ag.jpeg)](https://medium.com/@ahmadzuriqi4?source=post_page---read_next_recirc--7a62e9f0068f----1---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [Ahmadzuriqi](https://medium.com/@ahmadzuriqi4?source=post_page---read_next_recirc--7a62e9f0068f----1---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [9](https://medium.com/@ahmadzuriqi4/how-i-earned-3-300-in-bug-bounties-using-asn-reconnaissance-3464bb23bafa?source=post_page---read_next_recirc--7a62e9f0068f----1---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [![Image 20: Kalawy](https://miro.medium.com/v2/resize:fill:20:20/1*huvwWX-aLFA9Vav09K7yAw.jpeg)](https://kalawy.medium.com/?source=post_page---read_next_recirc--7a62e9f0068f----0---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [Kalawy](https://kalawy.medium.com/?source=post_page---read_next_recirc--7a62e9f0068f----0---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [![Image 22: Medusa](https://miro.medium.com/v2/resize:fill:20:20/1*f2U6mEKEJfzwHgsgrqFAXw.jpeg)](https://medusa0xf.medium.com/?source=post_page---read_next_recirc--7a62e9f0068f----1---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [Medusa](https://medusa0xf.medium.com/?source=post_page---read_next_recirc--7a62e9f0068f----1---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [1](https://medusa0xf.medium.com/bypassing-2fa-in-graphql-apis-a-step-by-step-guide-4b73816bd4c3?source=post_page---read_next_recirc--7a62e9f0068f----1---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) Valuable.](https://miro.medium.com/v2/resize:fill:20:20/1*8-CMNGG1bFXJByHYeDNKvw.jpeg)](https://long.sweet.pub/?source=post_page---read_next_recirc--7a62e9f0068f----2---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [Ossai Chinedum](https://ossaichinedum.medium.com/?source=post_page---read_next_recirc--7a62e9f0068f----2---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [1441](https://ossaichinedum.medium.com/ill-instantly-know-you-used-chat-gpt-if-i-see-this-d0a635bc0a00?source=post_page---read_next_recirc--7a62e9f0068f----2---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [![Image 26: Flutter Minds](https://miro.medium.com/v2/resize:fill:20:20/1*B21E9h_35ZAdN8gy1ONcGQ.jpeg)](https://medium.com/flutter-minds?source=post_page---read_next_recirc--7a62e9f0068f----3---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [Flutter Minds](https://medium.com/flutter-minds?source=post_page---read_next_recirc--7a62e9f0068f----3---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [Sumit Kumar](https://medium.com/@sumit.dhawan0?source=post_page---read_next_recirc--7a62e9f0068f----3---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) ✅ You’re in.](https://medium.com/@sumit.dhawan0/part-2-biometric-authentication-bypass-in-flutter-how-frida-can-fool-your-fingerprint-checks-c26d99a96fc7?source=post_page---read_next_recirc--7a62e9f0068f----3---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------) [](https://medium.com/@sumit.dhawan0/part-2-biometric-authentication-bypass-in-flutter-how-frida-can-fool-your-fingerprint-checks-c26d99a96fc7?source=post_page---read_next_recirc--7a62e9f0068f----3---------------------1a267e36_0fd3_4276_b603_d5e8716acbb7--------------)\n\nCWE-193 - Off-by-one Error - CyberSecurity Help\nhttps://www.cybersecurity-help.cz/vdb/cwe/193/\nDescription. A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\n\nCWE-193 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-193\nThe Common Weakness Enumeration Discovery Index shows platform-wide data of instances, and severity and remediation time distributions.\n\nCWE-193: Off-by-one Error - The Vulnerability History Project\nhttps://vulnerabilityhistory.org/tags/cwe-193\n\"A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.\" - Entry from the Common Weakness\n",
    "query": "CWE-193"
  },
  "CWE-362": {
    "summary": "CWE-362: Concurrent Execution using Shared Resource with ... - Mitre\nhttps://cwe.mitre.org/data/definitions/362.html\n| CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')  |  | | --- | | Weakness ID: 362   Vulnerability Mapping: ALLOWED This CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review (with careful review of mapping notes)   Abstraction: Class Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. | 367 | Time-of-check Time-of-use (TOCTOU) Race Condition | | ParentOf | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCVE-2025-59205: CWE-362: Concurrent Execution using Shared ...\nhttps://radar.offseq.com/threat/cve-2025-59205-cwe-362-concurrent-execution-using--6654249f\nDetailed information about CVE-2025-59205: CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race\n\nCVE-2025-58727: CWE-362: Concurrent Execution using Shared ...\nhttps://radar.offseq.com/threat/cve-2025-58727-cwe-362-concurrent-execution-using--1bf6f99c\nDetailed information about CVE-2025-58727: CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race\n\nCWE-362 - Concurrent Execution using Shared Resource with ...\nhttps://www.cybersecurity-help.cz/vdb/cwe/362/\nCWE-362 - Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'). Description. The programm has a few types of code\n\nCWE 362 Concurrent Execution using Shared Resource with ...\nhttps://www.cvedetails.com/cwe-details/362/Concurrent-Execution-using-Shared-Resource-with-Improper-Syn.html\n# CWE-362 : Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition') The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. CAPEC-29 Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file.\n",
    "query": "CWE-362 details"
  },
  "CWE-682": {
    "summary": "mitre cwe - Confluence\nhttps://wiki.sei.cmu.edu/confluence/display/c/MITRE+CWE\nCWE-682, Incorrect calculation. INT02-C · CWE-192, Integer coercion error. INT02-C · CWE-197, Numeric truncation error. INT05-C · CWE-192, Integer coercion\n\nIncorrect Calculation - CWE-682 - CVE Details\nhttps://www.cvedetails.com/cwe-details/682/Incorrect-Calculation.html\nAn attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an\n\nDARPA Cyber Grand Challenge Final Event Archive\nhttps://www.lungetech.com/cgc-corpus/challenges/YAN01_00002/\nThe main weaknesses are: CWE-787: Out-of-bounds write, CWE-682: Incorrect Calculation, CWE-681: Incorrect Conversion between Numeric Types. While the data\n\nCWE-681: Incorrect Conversion between Numeric Types - CVEFeed.io\nhttps://cvefeed.io/cwe/detail/cwe-681-incorrect-conversion-between-numeric-types\nHowever, the explicit cast to int always rounds DOWN, so the final value of $result is 4. int amount = 0;...if (result == ERROR)amount = -1;...return amount;unsigned int readdata () {} If the error condition in the code above is met, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers. Go to ##### CWE-195: Signed to Unsigned Conversion Error Go to ##### CWE-196: Unsigned to Signed Conversion Error Choose your layout Choose Light or Dark Scheme. Choose Fluid or Boxed layout. Choose Light or Dark Topbar Color. Choose a size of Sidebar. ###### Sidebar View Choose Default or Detached Sidebar view. Choose a color of Sidebar. Choose a preloader.\n\nCWE-681: Incorrect Conversion between Numeric Types\nhttps://cwe.mitre.org/data/definitions/681.html\n| 738 | CERT C Secure Coding Standard (2008) Chapter 5 - Integers (INT) | | MemberOf | Category - a CWE entry that contains a set of other entries that share a common characteristic. | 848 | The CERT Oracle Secure Coding Standard for Java (2011) Chapter 5 - Numeric Types and Operations (NUM) | | MemberOf | Category - a CWE entry that contains a set of other entries that share a common characteristic. | 872 | CERT C++ Secure Coding Section 04 - Integers (INT) | | MemberOf | Category - a CWE entry that contains a set of other entries that share a common characteristic.\n",
    "query": "CWE-682 Integer Conversion Error"
  },
  "CWE-134": {
    "summary": "Format String Bug in fortiguard-resources CLI command\nhttps://www.fortiguard.com/psirt/FG-IR-22-463\nA format string vulnerability [CWE-134] in the command line interpreter of FortiOS and FortiProxy may allow an authenticated user to execute unauthorized code\n\nCWE-134 - Use of Externally-Controlled Format String\nhttps://appsec.backslash.security/cwe/134\nCWE-134 - The product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\nCWE-134: Use of Externally-Controlled Format String (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/134.html\n| |  | | --- | | CWE Glossary Definition | |  |  CWE-134: Use of Externally-Controlled Format String  |  | | --- | | Weakness ID: 134   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCVE-2024-4641 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/cve-2024-4641\nWeakness Enumeration. CWE-ID, CWE Name, Source. CWE-134, Use of Externally-Controlled Format String, cwe source acceptance level NIST Moxa Inc.\n\nCWE Rule 134 - Use of Externally-Controlled Format String - MATLAB\nhttps://www.mathworks.com/help/bugfinder/ref/cwe134.html\nRule Description. The software uses a function that accepts a format string as an argument, but the format string originates from an external source.\n",
    "query": "CWE-134"
  },
  "CWE-345": {
    "summary": "Insufficient Verification of Data Authenticity [CWE-345]\nhttps://thehacktivists.medium.com/insufficient-verification-of-data-authenticity-cwe-345-the-hacktivists-330038b43a63\n# Insufficient Verification of Data Authenticity [CWE-345] — The Hacktivists If the application fails to verify data origin or its authenticity, an attacker might be able to perform spoofing attacks against vulnerable application or their clients. > **❏ User identity spoofing:** As an example of this weakness we will use a simple PHP script that displays contents of a customer’s basket based on user and basket identifiers: > **❏ CWE:352 — Cross-site Request Forgery:** The following example contains a simple HTML form that is used to leave comments for website owners: A great example of this vulnerability in client-side applications is the Man-in-the-Middle attack, where an attacker is able to spoof server identity and perform certain actions against clients. ❏ CAPEC-389: Content Spoofing Via Application API Manipulation\n\nCWE™ - Knowledge Base\nhttps://help.fluidattacks.com/portal/en/kb/articles/criteria-compliance-cwe\nPasswords with at least 20 characters · 332. Prevent the use of breached passwords · 522. Insufficiently protected credentials · 132. Passphrases with at least\n\nCWE 345 Insufficient Verification of Data Authenticity - CVE Details\nhttps://www.cvedetails.com/cwe-details/345/Insufficient-Verification-of-Data-Authenticity.html\nAn attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages.\n\nRed Lion DA50N - CISA\nhttps://www.cisa.gov/news-events/ics-advisories/icsa-22-104-03\n3.2.1 INSUFFICIENT VERIFICATION OF DATA AUTHENTICITY CWE-345 · 3.2.2 WEAK PASSWORD REQUIREMENTS CWE-521 · 3.2.3 USE OF UNMAINTAINED THIRD-PARTY\n\nInsufficient Protected Credentials | Amazon Q, Detector Library\nhttps://docs.aws.amazon.com/codeguru/detector-library/ruby/insufficiently-protected-credentials/\nInsufficient Protected Credentials | Amazon Q, Detector Library We use essential cookies and similar tools that are necessary to provide our site and services. We use performance cookies to collect anonymous statistics, so we can understand how customers use our site and make improvements. If you agree, AWS and approved third parties will also use cookies to provide useful site features, remember your preferences, and display relevant content, including relevant advertising. Essential cookies are necessary to provide our site and services and cannot be deactivated. Functional cookies help us provide useful site features, remember your preferences, and display relevant content. 3def insufficiently_protected_credentials_noncompliant(hmac_secret) 1def insufficiently_protected_credentials_compliant(hmac_secret) Privacy | Site terms | Cookie preferences |  © 2025, Amazon Web Services, Inc. or its affiliates.\n",
    "query": "CWE-345: Insufficiently Protected Credentials"
  },
  "CWE-459": {
    "summary": "CWE-459: Incomplete Cleanup (4.18)\nhttps://cwe.mitre.org/data/definitions/459.html\nCWE-459 deals specifically with a cleanup or shutdown process that does not successfully remove all potentially sensitive data.\n\nCWE 459 Incomplete Cleanup - CVE Details\nhttps://www.cvedetails.com/cwe-details/459/Incomplete-Cleanup.html\nCWE-459 : Incomplete Cleanup. The product does not properly \"clean up\" and remove temporary or supporting resources after they have been used. Created: 2006\n\nAn incomplete cleanup vulnerability [CWE-459] in FortiOS... - GitHub\nhttps://github.com/advisories/GHSA-hxxf-pxh8-jxxh\n{{ message }} ## An incomplete cleanup vulnerability [CWE-459] in FortiOS... Low severity Unreviewed Published Jun 10, 2025 to the GitHub Advisory Database Updated Jun 10, 2025 ## Package No package listed— Suggest a package ## Affected versions Unknown ## Patched versions Unknown ## Description An incomplete cleanup vulnerability [CWE-459] in FortiOS 7.2 all versions and before & FortiProxy version 7.2.0 through 7.2.2 and before 7.0.8 allows a VDOM privileged attacker to add SSH key files on the system silently via crafted CLI requests. ### References Published by the National Vulnerability Database Jun 10, 2025 Published to the GitHub Advisory Database Jun 10, 2025 Last updated Jun 10, 2025 ### Severity Low Attack vector Attack complexity Low Privileges required Low\n\nCVE-2025-59781: CWE-459 Incomplete Cleanup in F5 BIG-IP\nhttps://radar.offseq.com/threat/cve-2025-59781-cwe-459-incomplete-cleanup-in-f5-bi-45c32ff3\nCVE-2025-59781 is a vulnerability classified under CWE-459 (Incomplete Cleanup) affecting F5 BIG-IP and BIG-IP Next CNF virtual servers when DNS\n\nCVE-2025-6338: CWE-459 Incomplete Cleanup in The Qt Company ...\nhttps://radar.offseq.com/threat/cve-2025-6338-cwe-459-incomplete-cleanup-in-the-qt-517f4824\nThe vulnerability is categorized under CWE-459, indicating incomplete cleanup of resources after their use. This flaw affects Qt versions\n",
    "query": "CWE-459"
  },
  "CWE-707": {
    "summary": "CWE-707 - Improper Neutralization - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/707\nCWE-707 - The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met\n\nCWE-707 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-707\nDescription: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met\n\nCVE-2023-46689 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-46689\nDescription. Improper neutralization in Intel(R) Power Gadget software ... Weakness Enumeration. CWE-ID, CWE Name, Source. CWE-707, Improper\n\nCWE 707: Abstraction Theory - Understanding Complex Systems\nhttps://www.clouddefense.ai/cwe/definitions/707\nIt is a method of simplifying complex ideas or systems by focusing on the essential aspects while omitting unnecessary details. This process allows\n\nCWE-707: Improper Neutralization - Y-Security performs Attack ...\nhttps://pentest.y-security.de/CWE/CWE-707/\nDescription. The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are\n",
    "query": "CWE-707 Detailed Description"
  },
  "CWE-116": {
    "summary": "CWE-116: Improper Encoding or Escaping of Output\nhttps://cwe.mitre.org/data/definitions/116.html\n| CWE-116: Improper Encoding or Escaping of Output  |  | | --- | | Weakness ID: 116   Vulnerability Mapping: ALLOWED This CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review (with careful review of mapping notes)   Abstraction: Class Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. | 845 | The CERT Oracle Secure Coding Standard for Java (2011) Chapter 2 - Input Validation and Data Sanitization (IDS) | | MemberOf | Category - a CWE entry that contains a set of other entries that share a common characteristic.\n\nCWE 116 Improper Encoding or Escaping of Output - CVE Details\nhttps://www.cvedetails.com/cwe-details/116/Improper-Encoding-or-Escaping-of-Output.html\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly.\n\nCWE-116 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-116\nThe product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly.\n\nExploits in use of Externally-Controlled Format String - Stack Overflow\nhttps://stackoverflow.com/questions/56326285/exploits-in-use-of-externally-controlled-format-string\nWhen an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems.\n\nmitre cwe - Confluence\nhttps://wiki.sei.cmu.edu/confluence/display/java/MITRE+CWE\n| IDS03-J | CWE-117, Improper Output Neutralization for Logs | | OBJ10-J | CWE-493, Critical Public Variable without Final Modifier | | VNA00-J | CWE-413, Improper Resource Locking | | VNA00-J | CWE-667, Improper Locking | | VNA03-J | CWE-662, Improper Synchronization | | VNA05-J | CWE-667, Improper Locking | | LCK00-J | CWE-412. | LCK06-J | CWE-667, Improper Locking | | TPS03-J | CWE-392, Missing Report of Error Condition | | FIO13-J | CWE-532, Information Exposure through Log Files | | FIO13-J | CWE-533, Information Exposure through Server Log Files | | FIO13-J | CWE-542, Information Exposure through Cleanup Log Files | | MSC03-J | CWE-259, Use of Hard-Coded Password | | MSC03-J | CWE-798, Use of Hard-Coded Credentials | | STR51-J | CWE-838.\n",
    "query": "CWE-116: Improperly Controlled Format String"
  },
  "CWE-772": {
    "summary": "CWE Rule 772 - Missing Release of Resource after Effective Lifetime\nhttps://www.mathworks.com/help/bugfinder/ref/cwe772.html\nRule Description. The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.\n\nCWE-772: Effective Resource Management Strategies\nhttps://www.clouddefense.ai/cwe/definitions/772\n# CWE-772: Failure to Release Resource | MemberOf | 808 | CWE-808: Top 25 Most Dangerous Programming Errors Nominee List | | MemberOf | 867 | CWE-867: Weaknesses Excluded from Top 25 List | | MemberOf | 882 | CWE-882: Weaknesses in Concurrency (CON) Section of CERT C++ Secure Coding Standard | | MemberOf | 982 | CWE-982: SFP14 Failure to Release Resource Cluster | | MemberOf | 1129 | CWE-1129: Weaknesses in CISQ Quality Measures for Reliability | | MemberOf | 1162 | CWE-1162: Memory Management Weaknesses in SEI CERT C Coding Standard | | MemberOf | 1163 | CWE-1163: Weaknesses in Input Output Section of SEI CERT C Coding Standard | | MemberOf | 1416 | CWE-1416: Incorrect Initialization of Resource |\n\nCWE 772 Missing Release of Resource after Effective Lifetime\nhttps://www.cvedetails.com/cwe-details/772/Missing-Release-of-Resource-after-Effective-Lifetime.html\n[powered by SecurityScorecard](https://securityscorecard.com/?utm_source=cvedetails) [Metasploit Modules](https://www.cvedetails.com/metasploit-modules/1.html \"Metasploit modules and related CVEs\")[CWE Definitions](https://www.cvedetails.com/cwe-definitions/ \"CWE definitions\")[CAPEC Definitions](https://www.cvedetails.com/capec-definitions/ \"CAPEC definitions\")[Articles](https://securityscorecard.com/research/?utm_source=cvedetails \"Featured research articles from SecurityScorecard\")[Blog](https://securityscorecard.com/blog/?utm_source=cvedetails \"SecurityScorecard blog\") [Vulnerabilities related to CWE-772](https://www.cvedetails.com/vulnerability-list/cwe-772/vulnerabilities.html \"View list of security vulnerabilities related to CWE 772\") [CAPEC-469 HTTP DoS](https://www.cvedetails.com/capec-definition/CAPEC-469) ![Image 2: SecurityScorecard](https://www.cvedetails.com/img/ssc-logo.svg) [Products](https://securityscorecard.com/product/?utm_source=cvedetails \"SecurityScorecard products. [Solutions](https://securityscorecard.com/solutions?utm_source=cvedetails \"SecurityScorecard Cybersecurity Risk Rating & Third-Party Risk Management Solutions\") [Customers](https://securityscorecard.com/customers/?utm_source=cvedetails \"SecurityScorecard customers\") [Partners](https://securityscorecard.com/partners/?utm_source=cvedetails \"SecurityScorecard partners\") [Resources](https://securityscorecard.com/resources/?utm_source=cvedetails \"SecurityScorecard case studies, reports, ebooks and more resources\") [Company](https://securityscorecard.com/company/?utm_source=cvedetails \"SecurityScorecard company and organization\") [Trust Portal](https://securityscorecard.com/trust/?utm_source=cvedetails \"SecurityScorecard trust portal. [Security Ratings](https://securityscorecard.com/security-rating?utm_source=cvedetails \"SecurityScorecard security ratings\") [Blog](https://securityscorecard.com/blog/?utm_source=cvedetails \"SecurityScorecard blog\") [Contact](https://securityscorecard.com/company/contact-us/?utm_source=cvedetails \"Contact SecurityScorecard\") [Careers](https://securityscorecard.com/company/careers/?utm_source=cvedetails \"SecurityScorecard careers\") [Feedback](https://support.securityscorecard.com/?utm_source=cvedetails \"Feedback\") [](https://www.cvedetails.com/cwe-details/772/Missing-Release-of-Resource-after-Effective-Lifetime.html#top \"Top of the page\") By using this web site you are agreeing to CVEdetails.com [terms of use](https://www.cvedetails.com/terms-and-conditions.php)!\n\nCWE-772 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-772\n| [CVE-2007-0897](https://pentestreports.com/vulnerability/CVE-2007-0897) | Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans. | [CVE-2001-0830](https://pentestreports.com/vulnerability/CVE-2001-0830) | Sockets not properly closed when attacker repeatedly connects and disconnects from server. | [CVE-2009-2858](https://pentestreports.com/vulnerability/CVE-2009-2858) | Chain: memory leak (CWE-404) leads to resource exhaustion. | [CVE-2009-2054](https://pentestreports.com/vulnerability/CVE-2009-2054) | Product allows exhaustion of file descriptors when processing a large number of TCP packets. | [CVE-2008-2122](https://pentestreports.com/vulnerability/CVE-2008-2122) | Port scan triggers CPU consumption with processes that attempt to read data from closed sockets. | [CVE-2002-1372](https://pentestreports.com/vulnerability/CVE-2002-1372) | Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).\n\nCWE-772 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-772\n# Your connection is not private Attackers might be trying to steal your information from **www.security-database.com** (for example, passwords, messages, or credit cards). Learn more about this warning net::ERR\\_CERT\\_DATE\\_INVALID Subject: www.security-database.com Issuer: R11 Expires on: Aug 24, 2025 Current date: Oct 17, 2025 PEM encoded chain: -----BEGIN CERTIFICATE-----   MIIFEDCCA/igAwIBAgISBoBz37kaMu8CZ5hNEuN/VGQQMA0GCSqGSIb3DQEBCwUA   MDMxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQwwCgYDVQQD   EwNSMTEwHhcNMjUwNTI2MTg1NTA0WhcNMjUwODI0MTg1NTAzWjAkMSIwIAYDVQQD   OabUS/1NhFDLUBkXvbP+zLW1WGAK6NzZvbKxX2lQCU5J/dY3nE92iWigeunGv+R4   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   WghiDLZsMwhN1zjtSC0uBWiugF3vTNzYIEFfaPG7Ws3jDrAMMYebQ95JQ+HIBD/R   -----END CERTIFICATE-----   -----BEGIN CERTIFICATE-----   -----END CERTIFICATE----- This server could not prove that it is **www.security-database.com**; its security certificate expired 54 days ago. This may be caused by a misconfiguration or an attacker intercepting your connection. Your computer's clock is currently set to Friday, October 17, 2025. If not, you should correct your system's clock and then refresh this page. Proceed to www.security-database.com (unsafe)\n",
    "query": "CWE-772"
  },
  "CWE-172": {
    "summary": "CWE 172 Encoding Error - CVE Details\nhttps://www.cvedetails.com/cwe-details/172/Encoding-Error.html\nCWE-172 : Encoding Error. The product does not properly encode or decode the data, resulting in unexpected values. Created: 2006-07-19 Updated\n\nEncoding Error | Martello Security\nhttps://www.martellosecurity.com/kb/mitre/cwe/172/\nThe product does not properly encode or decode the data, resulting in unexpected values. Source. CWE Catalog - 4.17. Identifier. CWE-172.\n\nCWE-172: Encoding Error - Common Weakness Enumeration - Mitre\nhttps://cwe.mitre.org/data/definitions/172.html\nThis CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review (with careful review of mapping notes)\n\nCWE-172 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-172\nSecurity-Database help your corporation foresee and avoid any security risks that may impact your IT infrastructure and business applications.\n\nCWE-172 Encoding Issues - CloudDefense.AI\nhttps://www.clouddefense.ai/cwe/definitions/172\nCWE-172: Encoding Issues. Learn about strategies for robust input validation and output encoding to prevent encoding and injection vulnerabilities.\n",
    "query": "CWE-172"
  },
  "CWE-209": {
    "summary": "CWE 209: Information Exposure Through an Error Message | ASP.NET\nhttps://www.veracode.com/security/dotnet/cwe-209/\nAPPLICATION SECURITY * Application Security Basics + App Security Testing + Application Security Assessment + Application Security Risk + Application Security Tools + Application Testing Tool + SaaS Application Security + Secure Applications + Software Code Security + Software Security + Web Application Security Testing + Web Application Testing + Web Application Security Standards * Advanced Application Security + Secure Web Application Development + Vendor Application Security Testing **CWE 209: Information Exposure Through an Error Message** is a security weakness where an application or system reveals sensitive information to end users (and therefore, to attackers) in error messages. Applications that you not have tested in this way almost certainly write unexpected error output, which could contain unwanted information.\n\nCWE 209: Information Exposure Through an Error Message | Java\nhttps://www.veracode.com/security/java/cwe-209/\nAPPLICATION SECURITY * Application Security Basics + App Security Testing + Application Security Assessment + Application Security Risk + Application Security Tools + Application Testing Tool + SaaS Application Security + Secure Applications + Software Code Security + Web Application Security Testing + Web Application Testing + Web Application Security Standards * Advanced Application Security + Secure Web Application Development + Web Application Penetration Testing + Vendor Application Security Testing **CWE 209: Information Exposure Through an Error Message** is a security weakness where an application or system reveals sensitive information to end users (and therefore, to attackers) in error messages. Applications that have not been tested in this way will almost certainly write unexpected error output, which could contain unwanted information.\n\nCWE-209 - Information Exposure Through an Error Message\nhttps://www.cybersecurity-help.cz/vdb/cwe/209/\nDescription. The software generates an error message that includes sensitive information about its environment, users, or associated data.\n\nCWE-209 - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=cwe-209\nThe product generates an error message that includes sensitive information about its environment, users, or associated data. Related Reports. Reports are from\n\nCWE-209: Information Exposure Through an Error Message\nhttps://www.clouddefense.ai/cwe/definitions/209\nCWE-209: Information Exposure Through an Error Message. Learn how to manage error messages to prevent information exposure and enhance security.\n",
    "query": "CWE-209 Improper Information Disclosure"
  },
  "CWE-287": {
    "summary": "CWE-287 - Improper Authentication - CWE Discovery | HackerOne\nhttps://hackerone.com/hacktivity/cwe_discovery?id=CWE-287\nCWE Discovery | HackerOne CWE Discovery | **CWE ID** | **Name** | **Number of reports** | | **CWE-79** | Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') | 115,363 | | **CWE-284** | Improper Access Control | 48,955 | | **CWE-287** | Improper Authentication | 22,711 | | **CWE-89** | Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') | 12,819 | | **CWE-94** | Improper Control of Generation of Code ('Code Injection') | 8,930 | | **CWE-285** | Improper Authorization | 7,432 | | **CWE-307** | Improper Restriction of Excessive Authentication Attempts | 7,019 | | **CWE-20** | Improper Input Validation | 6,491 | | **CWE-77** | Improper Neutralization of Special Elements used in a Command ('Command Injection') | 4,811 | CWE-287\n\nCWE-287: Improper Authentication vulnerability exists... - GitHub\nhttps://github.com/advisories/GHSA-9w79-7j73-f648\nSign in  # Search code, repositories, users, issues, pull requests... Search syntax tips Sign in Sign up  You switched accounts on another tab or window. ## CWE-287: Improper Authentication vulnerability exists... High severity   Unreviewed   Published Mar 12, 2025 to the GitHub Advisory Database • Updated Mar 12, 2025 CWE-287: Improper Authentication vulnerability exists that could cause an Authentication Bypass when anunauthorized user without permission rights has physical access to the EPAS-UI computer and is able toreboot the workstation and interrupt the normal boot process. ### Severity High  #### CVSS v4 base metrics Attack Complexity Low User interaction None ##### Subsequent System Impact Metrics Confidentiality None Integrity None Availability None CVSS:4.0/AV:P/AC:L/AT:N/PR:N/UI:N/VC:H/VI:H/VA:H/SC:N/SI:N/SA:N/E:X/CR:X/IR:X/AR:X/MAV:X/MAC:X/MAT:X/MPR:X/MUI:X/MVC:X/MVI:X/MVA:X/MSC:X/MSI:X/MSA:X/S:X/AU:X/R:X/V:X/RE:X/U:X #### Improper Authentication CVE-2025-0813 ### GHSA ID Suggest improvements for this vulnerability.\n\nCWE 287 Improper Authentication - CVE Details\nhttps://www.cvedetails.com/cwe-details/287/Improper-Authentication.html\nAn attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. The attacker is therefore able to access protected data without authentication ever having taken place. An adversary takes advantage of improper authentication to provide data or services under a falsified identity. An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token.\n\nAuthentication bypass vulnerability (CWE-287\nhttps://flexerasoftware.my.site.com/revenera/s/article/authentication-bypass-vulnerability-cwe-287-improper-authentication-not-affected\nA review of our SAML implmentation (CWE-287: Improper Authentication), enabling possible authentication bypass, has determined that FlexNet Manager Suite is not\n\nCWE Rule 287 - Improper Authentication - MATLAB - MathWorks\nhttps://www.mathworks.com/help/bugfinder/ref/cwe287.html\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n",
    "query": "CWE-287: Improper Authentication"
  },
  "CWE-502": {
    "summary": "Best Practices - Unsafe Deserialization of untrusted data - Support\nhttps://support.waratek.com/knowledge/best-practices-unsafe-deserialization-of-untrusted-data\nVulnerability Overview. Deserialization of untrusted data (CWE-502) occurs when applications deserialize data from untrusted sources without sufficiently\n\nCWE 502 Deserialization of Untrusted Data - CVE Details\nhttps://www.cvedetails.com/cwe-details/502/Deserialization-of-Untrusted-Data.html\n# CWE-502 : Deserialization of Untrusted Data The product deserializes untrusted data without sufficiently ensuring that the resulting data will be valid. Source: https://cwe.mitre.org/data/definitions/502.html Vulnerabilities related to CWE-502 ### Related CAPEC definitions CAPEC-586 Object Injection An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. Please note that CWE definitions are provided as a quick reference only. Visit http://cwe.mitre.org/ for a complete list of CWE entries This web site uses cookies for managing your session, storing preferences, website analytics and additional purposes\n\nTID-326: Insecure Deserialization - MITRE EMB3D™\nhttps://emb3d.mitre.org/threats/TID-326.html\nCWE. CWE-502: Deserialization of Untrusted Data (Base) “The product deserializes untrusted data without sufficiently verifying that the resulting data will be\n\nCWE-502: Deserialization of Untrusted Data\nhttps://cwe.mitre.org/data/definitions/502.html\nIt is not a complete list of all CVEs that are related to this CWE entry.*  | Reference | Description | | --- | --- | | CVE-2024-37052 | insecure deserialization in platform for managing AI/ML applications and models allows code execution via a crafted pickled object in a model file | | CVE-2024-37288 | deserialization of untrusted YAML data in dashboard for data query and visualization of Elasticsearch data | | CVE-2024-9314 | PHP object injection in WordPress plugin for AI-based SEO | | CVE-2019-12799 | chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183) | | CVE-2015-8103 | Deserialization issue in commonly-used Java library allows remote execution.\n\nHow to fix DAST 502 Deserialization of Untrusted Data\nhttps://veracode.my.site.com/CustomerCommunity/s/question/0D53n00008RLfQhCAL/how-to-fix-dast-502-deserialization-of-untrusted-data\nIn my java code, i am getting vulnerability in DAST flaw like 502  Deserialization of Untrusted Data with  Veracode Dynamic Analysis reports CWE 502 when it can observe a string that looks like a serialized object in an HTTP request to your backend. This is because this string would indicate a serialized and base64 encoded Java object, which is very likely going to be base64 decoded and deserialized again in the backend. Upon deserialization, the backend first checks the signature and makes sure that the object-to-deserialize has not been tampered with and is actually an object that has been serialized by a trusted entity (and not an attacker). These cookies do not store any personally identifiable information.\n",
    "query": "CWE-502: Deserialization of Untrusted Data"
  },
  "CWE-693": {
    "summary": "CWE-693 - Protection Mechanism Failure - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/693\nCWE-693 - Protection Mechanism Failure - Details and CVSS Score [![Image 1: Backslash Logo](https://appsec.backslash.security/BackSlash_logo.svg)](https://www.backslash.security/?ref=appsec)[CWE DATABASE](https://appsec.backslash.security/) [About](https://www.backslash.security/about?ref=appsec)[GET A DEMO](https://www.backslash.security/demo?ref=appsec) [Backslash Vulnerability Database![Image 2](https://appsec.backslash.security/chevron.svg)](https://appsec.backslash.security/)Protection Mechanism Failure ![Image 3](https://appsec.backslash.security/Search.svg) Protection Mechanism Failure #### Short description ![Image 4](https://appsec.backslash.security/chevron.svg) The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product. #### Extended description ![Image 5](https://appsec.backslash.security/chevron.svg) *   [![Image 6: LinkedIn Icon](https://appsec.backslash.security/linkedin.svg)](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fappsec.backslash.security%2Fcwe%2F693&title=Protection%20Mechanism%20Failure) *   [![Image 7: Facebook Icon](https://appsec.backslash.security/facebook.svg)](https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fappsec.backslash.security%2Fcwe%2F693) *   [![Image 8: X Icon](https://appsec.backslash.security/xitter.svg)](https://x.com/intent/tweet?text=https%3A%2F%2Fappsec.backslash.security%2Fcwe%2F693?title=Protection%20Mechanism%20Failure) *   [![Image 9: Link Icon](https://appsec.backslash.security/octicon_link-16.svg)](https://appsec.backslash.security/cwe/693#) *   [GHSA-5j94-f3mf-8685](https://github.com/advisories/GHSA-5j94-f3mf-8685) *   [GHSA-xgq9-7gw6-jr5r](https://github.com/advisories/GHSA-xgq9-7gw6-jr5r) *   [GHSA-6j75-5wfj-gh66](https://github.com/advisories/GHSA-6j75-5wfj-gh66) *   [GHSA-c6vp-jjgv-38wj](https://github.com/advisories/GHSA-c6vp-jjgv-38wj) *   [GHSA-hvxg-77mg-vrvp](https://github.com/advisories/GHSA-hvxg-77mg-vrvp) [Get a Demo](https://www.backslash.security/demo?ref=appsec) [![Image 10: Backslash Logo](https://appsec.backslash.security/BackSlash_white_logo.svg)](https://www.backslash.security/?ref=appsec) ![Image 11: Infosec](https://appsec.backslash.security/infosec.svg)![Image 12: Cyber Awards](https://appsec.backslash.security/cyber.svg)![Image 13: OSWAP](https://appsec.backslash.security/owasp_logo_white.svg) 28 HaArba'a St., Tel-Aviv [Privacy Policy](https://www.backslash.security/privacy-policy) | [Terms of Use](https://www.backslash.security/terms-of-use) *   [![Image 14: X Logo](https://appsec.backslash.security/xitter-white.svg)](https://twitter.com/BackslashSec) *   [![Image 15: LinkedIn Logo](https://appsec.backslash.security/linkedin-white.svg)](https://www.linkedin.com/company/backslashsecurity/)\n\nCWE ID 693, which response headers are required?\nhttps://community.veracode.com/s/question/0D53400004WJkgaCAD/cwe-id-693-which-response-headers-are-required\nThe description is: One or more recommended response headers are absent or set to insecure values. These response headers are necessary to\n\nCWE-693 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-693\n[**Pentest Reports**](https://pentestreports.com/)[](https://pentestreports.com/weaknesses/CWE-693#) [Reports](https://pentestreports.com/reports)[Templates](https://pentestreports.com/templates)[Software](https://pentestreports.com/commands) [Community](https://pentestreports.com/weaknesses/CWE-693) [Companies](https://pentestreports.com/companies)[Events](https://pentestreports.com/events)[Jobs](https://pentestreports.com/jobs) [Interviews](https://pentestreports.com/interviews) [Learning](https://pentestreports.com/weaknesses/CWE-693) [Contribute](https://pentestreports.com/weaknesses/CWE-693) A \"missing\" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An \"insufficient\" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. ![Image 1: Logo](https://pentestreports.com/images/icon-512.png) *   [Cybersecurity companies in United States](https://pentestreports.com/companies/united-states) *   [Cybersecurity companies in United Kingdom](https://pentestreports.com/companies/united-kingdom) *   [Cybersecurity companies in France](https://pentestreports.com/companies/france) *   [Cybersecurity companies in Germany](https://pentestreports.com/companies/germany) *   [Cybersecurity companies in Canada](https://pentestreports.com/companies/canada) *   [Cybersecurity companies in Spain](https://pentestreports.com/companies/spain) *   [Security tools for Code_analysis](https://pentestreports.com/commands/code_analysis) *   [Security tools for Vulnerability_assessment](https://pentestreports.com/commands/vulnerability_assessment) *   [Security tools for Web_application_exploitation](https://pentestreports.com/commands/web_application_exploitation) *   [Security tools for Honeypot_and_decoy](https://pentestreports.com/commands/honeypot_and_decoy) *   [Security tools for Digital_forensics](https://pentestreports.com/commands/digital_forensics) *   [Security tools for Bug Bounty](https://pentestreports.com/commands/bug-bounty)\n\nCWE 693 Protection Mechanism Failure - CVE Details\nhttps://www.cvedetails.com/cwe-details/693/Protection-Mechanism-Failure.html\nAn attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. CAPEC-16 Dictionary-based Password Attack An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.\n\nA CWE-693 “Protection Mechanism Failure” vulnerability in... - GitHub\nhttps://github.com/advisories/GHSA-j594-4mw2-8pmc\n[Skip to content](https://github.com/advisories/GHSA-j594-4mw2-8pmc#start-of-content) [](https://github.com/) *   [Code Search Find more, search less](https://github.com/features/code-search) *   [Documentation](https://docs.github.com/) *   [Enterprises](https://github.com/enterprise) *   [Nonprofits](https://github.com/solutions/industry/nonprofits) *   [DevSecOps](https://github.com/solutions/use-case/devsecops) *   [DevOps](https://github.com/solutions/use-case/devops) *   [View all use cases](https://github.com/solutions/use-case) *   [Healthcare](https://github.com/solutions/industry/healthcare) *   [Manufacturing](https://github.com/solutions/industry/manufacturing) *   [Government](https://github.com/solutions/industry/government) *   [View all industries](https://github.com/solutions/industry) [View all solutions](https://github.com/solutions) *   [AI](https://github.com/resources/articles?topic=ai) *   [Security](https://github.com/resources/articles?topic=security) *   [View all](https://github.com/resources/articles) *   [Topics](https://github.com/topics) To see all available qualifiers, see our [documentation](https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax). [Reload](https://github.com/advisories/GHSA-j594-4mw2-8pmc) to refresh your session.You signed out in another tab or window. [Reload](https://github.com/advisories/GHSA-j594-4mw2-8pmc) to refresh your session.You switched accounts on another tab or window. [Reload](https://github.com/advisories/GHSA-j594-4mw2-8pmc) to refresh your session.Dismiss alert 2.   [Unreviewed](https://github.com/advisories?query=type%3Aunreviewed) 3.   [CVE-2023-45593](https://github.com/advisories/GHSA-j594-4mw2-8pmc) No package listed— [Suggest a package](https://github.com/advisories/GHSA-j594-4mw2-8pmc/improve) #### [Incomplete List of Disallowed Inputs](https://github.com/advisories?query=cwe%3A184) #### [Protection Mechanism Failure](https://github.com/advisories?query=cwe%3A693) [Please reload this page](https://github.com/advisories/GHSA-j594-4mw2-8pmc). [Suggest improvements for this vulnerability](https://github.com/advisories/GHSA-j594-4mw2-8pmc/improve). *   [Security](https://github.com/security) *   [Docs](https://docs.github.com/) *   [Contact](https://support.github.com/?tags=dotcom-footer)\n",
    "query": "CWE-693 detailed description"
  },
  "CWE-369": {
    "summary": "Vulnerability Details : CVE-2019-1010315 - CWE 369\nhttps://www.cvedetails.com/cve/CVE-2019-1010315/\nWavPack 5.1 and earlier is affected by: CWE 369: Divide by Zero. The impact is: Divide by zero can lead to sudden crash of a software/service\n\nCWE-369 - Divide By Zero - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/369\nShort description. The product divides a value by zero. Extended description. This weakness typically occurs when an unexpected value is provided to the product\n\nCVE-2024-21438 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/cve-2024-21438\nWeakness Enumeration. CWE-ID, CWE Name, Source. NVD-CWE-noinfo, Insufficient Information, cwe source acceptance level NIST. CWE-369, Divide By Zero, Microsoft\n\nCWE 369 Divide By Zero - CVE Details\nhttps://www.cvedetails.com/cwe-details/369/Divide-By-Zero.html\nThe product divides a value by zero. Created: 2008-04-11 Updated: 2025-04-03 Source: https://cwe.mitre.org/data/definitions/369.html.\n\nCWE Rule 369 - Divide By Zero - MATLAB - MathWorks\nhttps://de.mathworks.com/help/bugfinder/ref/cwe369.html\nRule Description. The product divides a value by zero. Polyspace Implementation. The rule checker checks for these issues:.\n",
    "query": "CWE-369 details"
  },
  "CWE-754": {
    "summary": "Improper Check for Unusual or Exceptional Conditions CWE-754\nhttps://feedly.com/cve/cwe/754\nImproper Check for Unusual or Exceptional Conditions. CWE-754 ; CVE-2025-9998The sequence of packets received by a Networking server are not correctly checked.\n\nCWE-754: Improper Check for Unusual or Exceptional Conditions\nhttps://vulnerabilityhistory.org/tags/cwe-754\n*   [Vulnerabilities](https://vulnerabilityhistory.org/vulnerabilities) *   [Tags](https://vulnerabilityhistory.org/tags/cwe-754#) *   [All](https://vulnerabilityhistory.org/tags) *   [Projects](https://vulnerabilityhistory.org/tags?search=Project:) *   [CWEs](https://vulnerabilityhistory.org/tags?search=CWE) *   [Languages](https://vulnerabilityhistory.org/tags?search=Language) *   [Lessons](https://vulnerabilityhistory.org/tags?search=Lesson) *   [Severities](https://vulnerabilityhistory.org/tags?search=Severity:) *   [Subsystems](https://vulnerabilityhistory.org/tags?search=Subsystem) *   [More](https://vulnerabilityhistory.org/tags/cwe-754#) *   [About Us](https://vulnerabilityhistory.org/about) *   [Examples](https://vulnerabilityhistory.org/tags/cwe-754#examples) | [![Image 5](https://vulnerabilityhistory.org/tags/cwe-754)CVE-2016-1636](https://vulnerabilityhistory.org/CVE-2016-1636) | The code that handled subresource integrity checks was flawed in that if a resource was requested from the same origin a second time, a second check wouldn't be run. |  | [2016-03-05](https://vulnerabilityhistory.org/CVE-2016-1636) | 15 | | [![Image 6](https://vulnerabilityhistory.org/tags/cwe-754)CVE-2010-4576](https://vulnerabilityhistory.org/CVE-2010-4576) | Improper handling of certain code calls allow for a denial of service (DOS) type vulnerability. | [![Image 7](https://vulnerabilityhistory.org/tags/cwe-754)CVE-2011-1465](https://vulnerabilityhistory.org/CVE-2011-1465) | Response bodies for a certain type of HTTP stream are not drained. | [![Image 9](https://vulnerabilityhistory.org/tags/cwe-754)CVE-2014-1737](https://vulnerabilityhistory.org/CVE-2014-1737) | ... | [![Image 10](https://vulnerabilityhistory.org/tags/cwe-754)CVE-2017-1000407](https://vulnerabilityhistory.org/CVE-2017-1000407) | ... | [![Image 11](https://vulnerabilityhistory.org/tags/cwe-754)CVE-2018-18690](https://vulnerabilityhistory.org/CVE-2018-18690) | ... [expand_less](https://vulnerabilityhistory.org/tags/cwe-754#) *   [About Us](https://vulnerabilityhistory.org/about)\n\nCWE-754: Improper Check for Unusual or Exceptional Conditions\nhttps://cwe.mitre.org/data/definitions/754.html\n| 1405 | Comprehensive Categorization: Improper Check or Handling of Exceptional Conditions |  Vulnerability Mapping Notes  |  |  | | --- | --- | | Usage | **ALLOWED-WITH-REVIEW**  (this CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review) | | Reason | Abstraction | |  | This CWE entry is a Class and might have Base-level children that would be more appropriate | |  | Examine children of this entry to see if there is a better fit |  Sometimes, when a return value can be used to indicate an error, an unchecked return value is a code-layer instance of a missing application-layer check for exceptional conditions.\n\nCWE-754 - Improper Check for Unusual or Exceptional Conditions\nhttps://www.cybersecurity-help.cz/vdb/cwe/754/\nCWE-754 - Improper Check for Unusual or Exceptional Conditions. Latest vulnerabilities for CWE-754. Multiple vulnerabilities in IBM Cloud Pak for Business\n\nCWE 754 Improper Check for Unusual or Exceptional Conditions\nhttps://www.cvedetails.com/cwe-details/754/Improper-Check-for-Unusual-or-Exceptional-Conditions.html\nCWE 754 Improper Check for Unusual or Exceptional Conditions powered by SecurityScorecard Vulnerabilities  Vulnerable Software  My Attack SurfaceDigital FootprintDiscovered ProductsDetected VulnsIP Search CWE-754 : Improper Check for Unusual or Exceptional Conditions Created: 2009-03-03 Updated: 2024-07-16 Source:https://cwe.mitre.org/data/definitions/754.html Vulnerabilities related to CWE-754 Image 2: SecurityScorecard SecurityScorecard  CVE is a registred trademark of the MITRE Corporation and the authoritative source of CVE content is MITRE's CVE web site. CWE is a registred trademark of the MITRE Corporation and the authoritative source of CWE content is MITRE's CWE web site. OVAL is a registered trademark of The MITRE Corporation and the authoritative source of OVAL content is MITRE's OVAL web site. By using this web site you are agreeing to CVEdetails.com terms of use!\n",
    "query": "CWE-754 introduction"
  },
  "CWE-755": {
    "summary": "CWE 755 Improper Handling of Exceptional Conditions - CVE Details\nhttps://www.cvedetails.com/cwe-details/755/Improper-Handling-of-Exceptional-Conditions.html\nCWE-755 : Improper Handling of Exceptional Conditions. The product does not handle or incorrectly handles an exceptional condition.\n\nCVE-2019-6842 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2019-6842\nA CWE-755: Improper Handling of Exceptional Conditions vulnerability exists in Modicon M580, Modicon M340, Modicon BMxCRA and 140CRA modules (all firmware\n\nCWE-755 - Improper Handling of Exceptional Conditions - Details ...\nhttps://appsec.backslash.security/cwe/755\nCWE-755 - The product does not handle or incorrectly handles an exceptional condition.\n\nCWE-755 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-755\nCWE 755 ; Description. Description Summary. The software fails to handle or improperly handles an exceptional condition. ; Time of Introduction. Implementation.\n\nCWE-755 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-755\nCWE-755: Improper Handling of Exceptional Conditions. Abstraction: Class. Structure: Simple. Status: Incomplete. Likelihood of Exploit: Medium. Description:.\n",
    "query": "CWE-755 details"
  },
  "CWE-18": {
    "summary": "CWE-18: CWE CATEGORY: DEPRECATED: Source Code (4.18)\nhttps://cwe.mitre.org/data/definitions/18.html\nCommon Weakness Enumeration (CWE) is a list of software and hardware weaknesses.\n\nVulnerabilities:CWE (Common Weakness Enumeration) Overview\nhttps://www.ipa.go.jp/en/security/vulnerabilities/cwe.html\n*   [Jump to Navigation](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html#mainMenu) *   [Jump to Main Contents](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html#mainContent) *   [Jump to Footer](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html#footerContent) CWE (Common Weakness Enumeration)[(*1)](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html#L1) aims to provide a common base to identify the type of software weakness (vulnerability). [JVN iPedia Opens a new Window](http://jvndb.jvn.jp/en/) began to support CWE as a trial on September 10, 2008[(*7)](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html#Footnote). [MyJVN Opens a new Window](http://jvndb.jvn.jp/en/apis/myjvn/) began to support CWE on October 23, 2008[(*8)](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html#Footnote). - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2025q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2025q1_en.html) - Sep.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2024q3_en.html) - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2024q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2024q1_en.html) - Sep.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2023q3_en.html) - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2023q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2023q1_en.html) - Sep.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2022q3_en.html) - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2022q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2022q1_en.html) - Sep.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2021q3_en.html) - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2021q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2021q1_en.html) - Sep.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2020q3_en.html) - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2020q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2020q1_en.html) - Sep.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2019q3_en.html) - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2019q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2019q1_en.html) - Sep.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2018q3_en.html) - Jun.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2018q2_en.html) - Mar.)]](https://www.ipa.go.jp/en/security/vulnerabilities/jvn/ipedia2018q1_en.html) *   [Vulnerabilities:CWE (Common Weakness Enumeration) Overview](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html) [Return to top of page](https://www.ipa.go.jp/en/security/vulnerabilities/cwe.html#)\n\nCWE-18 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-18\nSecurity-Database help your corporation foresee and avoid any security risks that may impact your IT infrastructure and business applications.\n\nCWE Definitions list and vulnerabilities for CWE entries - CVE Details\nhttps://www.cvedetails.com/cwe-definitions/\n| CWE-29 | Path Traversal: '\\..\\filename' | Vulnerabilities | | CWE-34 | Path Traversal: '....//' | Vulnerabilities | | CWE-35 | Path Traversal: '.../...//' | Vulnerabilities | | CWE-42 | Path Equivalence: 'filename.' (Trailing Dot) | Vulnerabilities | | CWE-43 | Path Equivalence: 'filename....' (Multiple Trailing Dot) | Vulnerabilities | | CWE-44 | Path Equivalence: 'file.name' (Internal Dot) | Vulnerabilities | | CWE-45 | Path Equivalence: 'file...name' (Multiple Internal Dot) | Vulnerabilities | | CWE-46 | Path Equivalence: 'filename ' (Trailing Space) | Vulnerabilities | | CWE-49 | Path Equivalence: 'filename/' (Trailing Slash) | Vulnerabilities | | CWE-52 | Path Equivalence: '/multiple/trailing/slash//' | Vulnerabilities | | CWE-58 | Path Equivalence: Windows 8.3 Filename | Vulnerabilities |\n\nCommon Weakness Enumeration (CWE) - Bugcrowd\nhttps://www.bugcrowd.com/glossary/common-weakness-enumeration-cwe/\nThe objective of the CWE is to eliminate vulnerabilities by identifying the most common errors made by developers and engineers so that they avoid these problems in the products and systems they build. The CWE describes weaknesses with an easily navigable taxonomy and common language, helps developers check for weaknesses in existing software and products, and more. CWE is sponsored by the U.S. Department of Homeland Security (DHS), the Cybersecurity and Infrastructure Security Agency (CISA), and is managed by the Homeland Security Systems Engineering and Development Institute (HSSEDI), which is, in turn, operated by The Mitre Corporation (MITRE). ## The CWE Top 25 The CWE Top 25 Most Dangerous Software Weaknesses is a community resource that identifies the most widespread and dangerous errors that lead to high-risk software vulnerabilities.\n",
    "query": "CWE-18 vulnerability details"
  },
  "CWE-399": {
    "summary": "Threats Tagged 'cwe-399'\nhttps://radar.offseq.com/threats?tag=cwe-399\nCyber threats tagged with 'cwe-399'. View detailed information about related vulnerabilities, malware, and attack campaigns.\n\nCWE-399: CWE CATEGORY: Resource Management Errors (4.18)\nhttps://cwe.mitre.org/data/definitions/399.html\n| 699 | Software Development | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 763 | Release of Invalid Pointer or Reference | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. | 911 | Improper Update of Reference Count | | HasMember | Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE-CWE-399 CVE - CVE Search - CVE Details - Reconshell\nhttps://cve.reconshell.com/cve?cwe=CWE-399&page=2\nUse-after-free vulnerability in arch/x86/kvm/x86.c in the Linux kernel through 3.8.4 allows guest OS users to cause a denial of service (host OS memory\n\nCWE-399 sample space of distribution. - ResearchGate\nhttps://www.researchgate.net/figure/CWE-399-sample-space-of-distribution_fig5_362663649\nCWE-399 sample space of distribution. SFN: A Novel Scalable Feature Network for Vulnerability Representation of Open-Source Codes.\n\nShow CWE-399: Resource Management Errors - CXSecurity.com\nhttps://cxsecurity.com/cwe/CWE-399\nNote: This vulnerability does not impact traffic that is going through the device or going to the Management Ethernet interface of the device.\") |  |  | | --- | | **2021-02-04** |  |  |  |  |  | | --- | --- | --- | --- | | High | **CVE-2021-1288** | **Vendor:** Cisco Software: *Ios xr* | Multiple vulnerabilities in the ingress packet processing function of Cisco IOS XR Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. For more information about these vulnerabilities, see the Details section of this advisory.\") | | High | **CVE-2021-1313** | **Vendor:** Cisco Software: *Ios xr* | Multiple vulnerabilities in the ingress packet processing function of Cisco IOS XR Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an affected device.\n",
    "query": "CWE-399 details"
  },
  "CWE-327": {
    "summary": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm - Mitre\nhttps://cwe.mitre.org/data/definitions/327.html\n[![Image 54: +](https://cwe.mitre.org/images/head_more.gif)](javascript:toggleblocksOC('327_Taxonomy_Mappings');)Taxonomy Mappings | Mapped Taxonomy Name | Node ID | Fit | Mapped Node Name | | --- | --- | --- | --- | | CLASP | | | Using a broken or risky cryptographic algorithm | | OWASP Top Ten 2004 | A8 | CWE More Specific | Insecure Storage | | CERT C Secure Coding | MSC30-C | CWE More Abstract | Do not use the rand() function for generating pseudorandom numbers | | CERT C Secure Coding | MSC32-C | CWE More Abstract | Properly seed pseudorandom number generators | | The CERT Oracle Secure Coding Standard for Java (2011) | MSC02-J | | Generate strong random numbers | | OMG ASCSM | ASCSM-CWE-327 | | | | ISA/IEC 62443 | Part 3-3 | | Req SR 4.3 | | ISA/IEC 62443 | Part 4-2 | | Req CR 4.3 | [![Image 55: +](https://cwe.mitre.org/images/head_more.gif)](javascript:toggleblocksOC('327_Related_Attack_Patterns');)Related Attack Patterns | CAPEC-ID | Attack Pattern Name | | --- | --- | | [CAPEC-20](http://capec.mitre.org/data/definitions/20.html) | Encryption Brute Forcing | | [CAPEC-459](http://capec.mitre.org/data/definitions/459.html) | Creating a Rogue Certification Authority Certificate | | [CAPEC-473](http://capec.mitre.org/data/definitions/473.html) | Signature Spoof | | [CAPEC-475](http://capec.mitre.org/data/definitions/475.html) | Signature Spoofing by Improper Validation | | [CAPEC-608](http://capec.mitre.org/data/definitions/608.html) | Cryptanalysis of Cellular Encryption | | [CAPEC-614](http://capec.mitre.org/data/definitions/614.html) | Rooting SIM Cards | | [CAPEC-97](http://capec.mitre.org/data/definitions/97.html) | Cryptanalysis | [![Image 56: +](https://cwe.mitre.org/images/head_more.gif)](javascript:toggleblocksOC('327_References');)References [REF-280]Bruce Schneier.\n\nResolving CWE-327 Use of a Broken or Risky Cryptographic Algorithm\nhttps://community.veracode.com/s/question/0D53n00007tzEjZCAU/resolving-cwe327-use-of-a-broken-or-risky-cryptographic-algorithm\nIssue: Randomizing the IV value is resulting in an incorrect decoded value because of different IV values used at the time of encryption and decryption.\n\nCWE‑327: Use of a Broken or Risky Cryptographic Algorithm - Reddit\nhttps://www.reddit.com/r/bugbounty/comments/1ltuupy/cwe327_use_of_a_broken_or_risky_cryptographic/\nIt has been confirmed that the code is vulnerable using MD5. Simply using MD5 does not render something vulnerable.\n\nCWE 327 Use of a Broken or Risky Cryptographic Algorithm\nhttps://www.cvedetails.com/cwe-details/327/Use-of-a-Broken-or-Risky-Cryptographic-Algorithm.html\n# CWE-327 : Use of a Broken or Risky Cryptographic Algorithm An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key. CAPEC-608 Cryptanalysis of Cellular Encryption Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.\n\nBroken or risky cryptographic algorithm | Security | Android Developers\nhttps://developer.android.com/privacy-and-security/risks/broken-cryptographic-algorithm\n* Risk: Weak or broken cryptographic encryption functions * Risk: Weak or broken cryptographic encryption functions * **Data Breaches**: If passwords are hashed with a weak algorithm, a successful The use of weak or broken cryptographic encryption functions (such as `DES` or * **Data Breaches:** Weak encryption algorithms are susceptible to various #### Use strong cryptographic algorithms in encryption functions The use of weak or broken cryptographic signature functions (such as * **Forging signatures**: Weak signature algorithms can be vulnerable to attacks protect the integrity of data, a weak algorithm could allow attackers to modify * Weak or broken cryptographic hash and encryption functions Android security lint * Secure Hash Algorithm 2 (Wikipedia) * Secure Hash Algorithm 3 (Wikipedia)\n",
    "query": "CWE-327: Use of Broken or Risky Cryptographic Algorithm"
  },
  "CWE-346": {
    "summary": "A CWE-346 \"Origin Validation Error\" in the CORS... · CVE-2025-1102\nhttps://github.com/advisories/GHSA-657f-qvvx-wqv4\nOrigin Validation Error. The product does not properly verify that the source of data or communication is valid. Learn more on MITRE. CVE ID.\n\nCWE-346: Origin Validation Error (4.18) - MITRE Corporation\nhttps://cwe.mitre.org/data/definitions/346.html\n| |  |  | | --- | --- | | CWE Glossary Definition |  | |  | |    CWE-346: Origin Validation Error  |  | | --- | | Weakness ID: 346   Vulnerability Mapping: ALLOWED This CWE ID could be used to map to real-world vulnerabilities in limited situations requiring careful review (with careful review of mapping notes)   Abstraction: Class Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology.\n\nCWE-346 - Origin Validation Error - CyberSecurity Help\nhttps://www.cybersecurity-help.cz/vdb/cwe/346/\n2. Vulnerability Database 3. CWE List # CWE-346 - Origin Validation Error The vulnerability is introduced during Architecture and Design, Implementation stages. ## Latest vulnerabilities for CWE-346 Multiple vulnerabilities in Keycloak Multiple vulnerabilities in webpack-dev-server Multiple vulnerabilities in Autel Energy MaxiCharger AC Elite Business 50A Multiple vulnerabilities in Ubiquiti Networks UniFi Protect Cameras and Application IBM DataStage on Cloud Pak for Data update for Apache Maven Origin validation error in Misskey Multiple vulnerabilities in IBM Watson Studio on Cloud Pak for Data Multiple vulnerabilities in Discourse IBM InfoSphere Information Server update for Apache Maven Description of CWE-346 on Mitre website This website is using cookies. If you continue using our website, we'll assume that you are happy to receive all cookies on this website.\n\nShow CWE-346: Origin Validation Error - CXSecurity.com\nhttps://cxsecurity.com/cwe/CWE-346/\nWithout origin validation, Javascript executed from another origin would be allowed to connect to the application without any user interaction. Without origin validation, Javascript executed from another origin would be allowed to connect to the application without any user interaction. Users can override this behavior by setting environment variable `UPTIME_KUMA_WS_ORIGIN_CHECK=bypass`.\") |  |  | | --- | | **2023-04-28** |  |  |  |  |  | | --- | --- | --- | --- | |  | **CVE-2023-30856** | **Updating...** | eDEX-UI is a science fiction terminal emulator. |  |  | | --- | | **2022-10-13** |  |  |  |  |  | | --- | --- | --- | --- | |  | **CVE-2022-3457** | **Updating...** | Origin Validation Error in GitHub repository ikus060/rdiffweb prior to 2.5.0a5.\n\nCWE-346 - Origin Validation Error - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/346\nBackslash Logo CWE DATABASE · AboutGET A DEMO · Backslash Vulnerability Database Origin Validation Error. Origin Validation Error. CWE-346. Overtime trend (NVD)\n",
    "query": "CWE-346 \"Origin Validation Error\" details"
  },
  "CWE-400": {
    "summary": "CVE-2024-9409 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-9409\nChange History2 change records found show changes **Initial Analysis by NIST 11/19/2024 10:59:21 AM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | CVSS V3.1 |  | ``` NIST AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H ``` | | Added | CPE Configuration |  | ``` AND OR *cpe:2.3:o:schneider-electric:powerlogic_pm5320_firmware:*:*:*:*:*:*:*:* versions up to (excluding) 2.4.0 OR cpe:2.3:h:schneider-electric:powerlogic_pm5320:-:*:*:*:*:*:*:* ``` | | Added | CPE Configuration |  | ``` AND OR *cpe:2.3:o:schneider-electric:powerlogic_pm5340_firmware:*:*:*:*:*:*:*:* versions up to (excluding) 2.4.0 OR cpe:2.3:h:schneider-electric:powerlogic_pm5340:-:*:*:*:*:*:*:* ``` | | Added | CPE Configuration |  | ``` AND OR *cpe:2.3:o:schneider-electric:powerlogic_pm5341_firmware:*:*:*:*:*:*:*:* versions up to (excluding) 2.7.0 OR cpe:2.3:h:schneider-electric:powerlogic_pm5341:-:*:*:*:*:*:*:* ``` | | Changed | Reference Type | ``` https://download.schneider-electric.com/doc/SEVD-2024-317-01/SEVD-2024-317-01.pdf No Types Assigned ``` | ``` https://download.schneider-electric.com/doc/SEVD-2024-317-01/SEVD-2024-317-01.pdf Mitigation, Patch, Vendor Advisory ``` |  **New CVE Received from Schneider Electric SE 11/13/2024 12:15:27 AM**  | Action | Type | Old Value | New Value | | --- | --- | --- | --- | | Added | Description |  | ``` CWE-400: An Uncontrolled Resource Consumption vulnerability exists that could cause the device to become unresponsive resulting in communication loss when a large amount of IGMP packets is present in the network.\n\nWhat Is An Uncontrolled Resource Consumption Error? | Mayhem\nhttps://www.mayhem.security/blog/what-is-an-uncontrolled-resource-consumption-error\nCookie Consent By clicking **“Accept”**, you agree to the storing of cookies on your device to enhance site navigation, analyze site usage, and assist in our marketing efforts. View our Privacy Policy for more information. All Posts Mayhem Team CWE-400 Uncontrolled Resource Consumption occurs when an application does not properly control the number and/or size of resources that it allocates, it can consume too many resources. In some cases, uncontrolled resource consumption may allow attackers to perform resource exhaustion attacks in which they can take control of the application or cause it to crash. Share this post Privacy PolicyTerms of UseCookies Settings Code Security Get started with Mayhem today for fast, comprehensive, API security. Get Mayhem Get Mayhem\n\nCWE-400: Uncontrolled Resource Consumption\nhttps://cwe.mitre.org/data/definitions/400.html\nCWE-400 is intended for incorrect behaviors in which the product is expected to track and restrict how many resources it consumes, but CWE-400 is often misused\n\nCWE-400 | Uncontrolled resource consumption · Issue #35 - GitHub\nhttps://github.com/micromatch/braces/issues/35\nThe NPM package \"braces\" fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In \"lib/parse.js,\" if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. ### doowb commented on Mar 12, 2024 ### rahulmukherjee85 commented on Mar 18, 2024 Dependency npm:braces 3.0.2 is vulnerable   It looks like the description of this vulnerability is around the do/while loop for the imbalanced braces: CVEs for `micromatch` and `braces` vulnerabilities are now public. ### sdupont73 commented on May 13, 2024 CWE-400 | Uncontrolled resource consumption · Issue #35 · micromatch/braces\n\nCWE 400 Uncontrolled Resource Consumption - CVE Details\nhttps://www.cvedetails.com/cwe-details/400/Uncontrolled-Resource-Consumption.html\nAn attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. CAPEC-197 Exponential Data Expansion An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex.\n",
    "query": "CWE-400: Uncontrolled Resource Consumption"
  },
  "CWE-428": {
    "summary": "CVE-2024-2747 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-2747\nCWE-428: Unquoted search path or element vulnerability exists in Easergy Studio, which could cause privilege escalation when a valid user\n\nCWE-428 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-428\nCWE-428 weakness. Description: The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators.\n\nCVE-2024-31201 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-31201\nA “CWE-428: Unquoted Search Path or Element” affects the ThermoscanIP_Scrutation service. Such misconfiguration could be abused in scenarios where incorrect\n\nCWE-428: Unquoted Search Path or Element (4.18) - Mitre\nhttps://cwe.mitre.org/data/definitions/428.html\n| |  |  | | --- | --- | | CWE Glossary Definition |  | |  | |    CWE-428: Unquoted Search Path or Element  |  | | --- | | Weakness ID: 428   Vulnerability Mapping: ALLOWED This CWE ID may be used to map to real-world vulnerabilities   Abstraction: Base Base - a weakness that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention.\n\nCWE-428 - Unquoted Search Path or Element\nhttps://appsec.backslash.security/cwe/428\nCWE-428 - The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators.\n",
    "query": "CWE-428 details"
  },
  "CWE-200": {
    "summary": "What Is CWE-200 (Information Exposure)? - Attaxion\nhttps://attaxion.com/glossary/cwe-200-information-exposure/\nCWE-200 is a software weakness causing information exposure, disclosing sensitive data like credit card info, usernames, and system data to unauthorized people.\n\nCWE-200 - Security Database\nhttps://www.security-database.com/cwe.php?name=CWE-200\nAn information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that\n\nCVE-2024-12142 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2024-12142\nNVD - CVE-2024-12142 This is a potential security issue, you are being redirected to https://nvd.nist.gov NVD CWE-200: Exposure of Sensitive Information to an Unauthorized Actor vulnerability exists that could cause information disclosure of restricted web page, modification of web page and denial of service when specific web pages are modified and restricted functions are invoked. Please address comments about this page to nvd@nist.gov. | CWE-200 | Exposure of Sensitive Information to an Unauthorized Actor | Schneider Electric SE | | Added | Description |  | CWE-200: Exposure of Sensitive Information to an Unauthorized Actor vulnerability exists that could cause information disclosure of restricted web page, modification of web page and denial of service when specific web pages are modified and restricted functions are invoked.\n\nCWE-200 - CVE-2024-12142 · GitHub Advisory Database\nhttps://github.com/advisories/GHSA-9h4w-p78f-w2hw\nCWE-200: Exposure of Sensitive Information to an Unauthorized Actor vulnerability exists that could cause information disclosure of restricted web page.\n\nCVE-2025-59186: CWE-200: Exposure of Sensitive Information to ...\nhttps://radar.offseq.com/threat/cve-2025-59186-cwe-200-exposure-of-sensitive-infor-847cdccc\nThe vulnerability is classified under CWE-200, indicating exposure of sensitive information to unauthorized actors. The flaw resides in the\n",
    "query": "CWE-200 Information Exposure"
  },
  "CWE-401": {
    "summary": "[CVE-2024-41172] CWE-401: Improper Release of Memory Before ...\nhttps://ossindex.sonatype.org/vulnerability/CVE-2024-41172\n[CVE-2024-41172] CWE-401: Improper Release of Memory Before Removing Last Reference ('Memory Leak'). Description. In versions of Apache CXF before 3.6.4 and\n\nCWE-401 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-401\nMemory leak when counter variable is not decremented. CVE-2002-0574, chain: reference count is not decremented, leading to memory leak in OS by sending ICMP\n\nWhat Is A Missing Release Of Memory After Effective Lifetime Error?\nhttps://www.mayhem.security/blog/what-is-a-missing-release-of-memory-after-effective-lifetime-error\nAll Posts # What Is A Missing Release Of Memory After Effective Lifetime Error? CWE 401- Missing Release Of Memory After Effective Lifetime can occur when a program does not release memory after it is finished using it, that memory is said to be \"leaked\". Over time, as more and more memory is leaked, the program will eventually crash. In some cases, memory leaks can even cause the program to crash. To avoid memory leaks, programmers must be careful to always deallocate memory when it is no longer needed. When a memory leak is discovered in a program, it is often possible to fix it by adding a call to free() at the appropriate point in the code. Share this post\n\nCan't solve CWE-401 : r/C_Programming - Reddit\nhttps://www.reddit.com/r/C_Programming/comments/p49kle/cant_solve_cwe401/\nFirst of all, CWE-401 is not an error, but rather a warning. The code will work even if it leaks memory, and under certain circumstances you may\n\nCVE-2025-47150: CWE-401 Missing Release of Memory after ...\nhttps://radar.offseq.com/threat/cve-2025-47150-cwe-401-missing-release-of-memory-a-22acb820?utm_source=feedly\nCVE-2025-47150 is a vulnerability identified in the F5OS Appliance operating system used in F5 network appliances.\n",
    "query": "CWE-401: Memory Leak"
  },
  "CWE-122": {
    "summary": "CVE-2025-57740 Detail - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2025-57740\n| CVE-2025-57740 Detail **Undergoing Analysis** This CVE record is currently being enriched by team members, this process results in the association of reference link tags, CVSS, CWE, and CPE applicability statement data Description An Heap-based Buffer Overflow vulnerability [CWE-122] in FortiOS version 7.6.2 and below, version 7.4.7 and below, version 7.2.10 and below, 7.0 all versions, 6.4 all versions; FortiPAM version 1.5.0, version 1.4.2 and below, 1.3 all versions, 1.2 all versions, 1.1 all versions, 1.0 all versions and FortiProxy version 7.6.2 and below, version 7.4.3 and below, 7.2 all versions, 7.0 all versions RDP bookmark connection may allow an authenticated user to execute unauthorized code via crafted requests.\n\nK53293427: What is a Heap Overflow attack? - MyF5 | Support\nhttps://my.f5.com/manage/s/article/K53293427\nHeap Overflows (CWE-122) are a sub-class of the Buffer Overflow vulnerability (see K69961311) that can affect applications written in many programming languages, and the name describes any situation in which the software attempts to move data from one location in memory into a fixed-length buffer allocated on the heap, which is too small to hold the data. At worst, an attacker may be able to overwrite the meta-data with information that will lead to the memory management functions subsequently tampering with areas of memory not contained within the stack – in this way it is possible for an attacker to use a heap overflow to overwrite arbitrary areas of memory and inject malicious code.\n\nCVE-2025-59254: CWE-122: Heap-based Buffer Overflow in ...\nhttps://radar.offseq.com/threat/cve-2025-59254-cwe-122-heap-based-buffer-overflow--5942782f\nThe vulnerability is classified under CWE-122 (Heap-based Buffer Overflow), a common and dangerous class of memory corruption bugs. Given that\n\nCWE-122 - WebTechSurvey\nhttps://webtechsurvey.com/cwe/CWE-122\nCWE-122. Heap-based Buffer Overflow A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap\n\nCWE-122 weakness - Pentest Reports\nhttps://pentestreports.com/weaknesses/CWE-122\n*   { \"scope\": \"Integrity\", \"impact\": \"Execute Unauthorized Code or Commands\", \"note\": \"Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. | CVE-2009-2523 | Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122). | CVE-2021-29529 | Chain: machine-learning product can have a heap-based buffer overflow (CWE-122) when some integer-oriented bounds are calculated by using ceiling() and floor() on floating point values (CWE-1339) | | CVE-2010-1866 | Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).\n",
    "query": "CWE-122 details"
  },
  "CWE-834": {
    "summary": "CWE-834 - Excessive Iteration - Details and CVSS Score\nhttps://appsec.backslash.security/cwe/834\nCWE-834 - The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.\n\nCVE-2023-1993 Report - Details, Severity, & Advisories | Twingate\nhttps://www.twingate.com/blog/tips/cve-2023-1993\nThe weakness enumeration for this vulnerability is categorized as CWE-834, which involves excessive iteration in Wireshark's LISP dissector. Learn More. For\n\nCVE-2017-11188 - NVD\nhttps://nvd.nist.gov/vuln/detail/CVE-2017-11188\nCWE-ID, CWE Name, Source. CWE-834, Excessive Iteration, cwe source acceptance level NIST. Known Affected Software Configurations Switch to CPE\n\nCWE 834 Excessive Iteration - CVE Details\nhttps://www.cvedetails.com/cwe-details/834/Excessive-Iteration.html\nThe product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.\n\nCWE Definitions list and vulnerabilities for CWE entries - CVE Details\nhttps://www.cvedetails.com/cwe-definitions/14/cwelist.html?order=1&trc=668&sha=0427874cc45423ccb6974ee25935fbfceac76fcb\n| [CWE-806](https://www.cvedetails.com/cwe-details/806/Buffer-Access-Using-Size-of-Source-Buffer.html \"CWE-806 - CWE definition\") | Buffer Access Using Size of Source Buffer | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-806/vulnerabilities.html \"View list of security vulnerabilities related to CWE-806\") | | [CWE-830](https://www.cvedetails.com/cwe-details/830/Inclusion-of-Web-Functionality-from-an-Untrusted-Source.html \"CWE-830 - CWE definition\") | Inclusion of Web Functionality from an Untrusted Source | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-830/vulnerabilities.html \"View list of security vulnerabilities related to CWE-830\") | | [CWE-908](https://www.cvedetails.com/cwe-details/908/Use-of-Uninitialized-Resource.html \"CWE-908 - CWE definition\") | Use of Uninitialized Resource | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-908/vulnerabilities.html \"View list of security vulnerabilities related to CWE-908\") | | [CWE-924](https://www.cvedetails.com/cwe-details/924/Improper-Enforcement-of-Message-Integrity-During-Transmissio.html \"CWE-924 - CWE definition\") | Improper Enforcement of Message Integrity During Transmission in a Communication Channel | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-924/vulnerabilities.html \"View list of security vulnerabilities related to CWE-924\") | | [CWE-940](https://www.cvedetails.com/cwe-details/940/Improper-Verification-of-Source-of-a-Communication-Channel.html \"CWE-940 - CWE definition\") | Improper Verification of Source of a Communication Channel | [Vulnerabilities](https://www.cvedetails.com/vulnerability-list/cwe-940/vulnerabilities.html \"View list of security vulnerabilities related to CWE-940\") |\n",
    "query": "CWE-834 details"
  }
}